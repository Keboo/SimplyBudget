<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Windows.Maths</name>
    </assembly>
    <members>
        <member name="M:Telerik.Windows.Maths.AlgebraExtensions.GaussJacobi(Telerik.Windows.Maths.RMatrix,Telerik.Windows.Maths.RVector,System.Int32,System.Double)">
            <summary>
            Gauss-Jordan elimination method to solve Ax = b for x.
            </summary>
            <param name="A">A real-valued matrix.</param>
            <param name="b">The real-valued vector.</param>
            <param name="MaxIterations">The maximum amount of iterations.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.AlgebraExtensions.GaussJordan(Telerik.Windows.Maths.RMatrix,Telerik.Windows.Maths.RVector)">
             <summary>
             Gauss-Jordan elimination method solving the Ax=b inear set of equations.
             </summary>
             <param name="A">A real-valued matrix.</param>
             <param name="b">A real-valued vector.</param>
            <remarks>http://en.wikipedia.org/wiki/Gauss-Jordan</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.AlgebraExtensions.LUCrout(Telerik.Windows.Maths.RMatrix,Telerik.Windows.Maths.RVector)">
            <summary>
            Triangulation of matrix A using LU decomposition on the basis of the Crout algorithm with pivoting.
            </summary>
            <param name="A">The real-valued matrix.</param>
            <param name="b">The real-valued vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.AlgebraExtensions.LUInverse(Telerik.Windows.Maths.RMatrix)">
            <summary>
            Returns the LU Matrix Inverse.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.AlgebraExtensions.LUDecompose(Telerik.Windows.Maths.RMatrix)">
            <summary>
            Returns the LU decomposition of the given matrix.
            </summary>
            <param name="matrix">A matrix.</param>
            <remarks>http://en.wikipedia.org/wiki/LU_decomposition</remarks>
        </member>
        <member name="T:Telerik.Windows.Maths.ComplexExtensions">
            <summary>
            Extension methods 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsZero(System.Numerics.Complex)">
            <summary>
            Return whether the <see cref="T:System.Numerics.Complex"/> number is zero (in an <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/> sense).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.PolarFormModulus(System.Numerics.Complex)">
            <summary>
            Calculates the modulus of the complex number in polar form.
            </summary>
            <returns>The modulus of the complex number in polar form.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.PolarFormAngle(System.Numerics.Complex)">
            <summary>
            Calculates the angle in radians for the complex number in polar form.
            </summary>
            <returns>The angle in radians for the complex number in polar form.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.NegateImaginaryNumberPart(System.Numerics.Complex)">
            <summary>
            Inverts the sign of the imaginary number part.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.NegateRealNumberPart(System.Numerics.Complex)">
            <summary>
            Inverts the sign of the real number part.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsOne(System.Numerics.Complex)">
            <summary>
            Returns whether the <see cref="T:System.Numerics.Complex"/> number is one (in an <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/> sense).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsImaginaryOne(System.Numerics.Complex)">
            <summary>
            Returns whether the <see cref="T:System.Numerics.Complex"/> number is the imaginary unit.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsNaN(System.Numerics.Complex)">
            <summary>
            Returns whether either one or both parts of the <see cref="T:System.Numerics.Complex"/> number is not a number (NaN).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsInfinity(System.Numerics.Complex)">
            <summary>
            Returns whether either one or both parts of the <see cref="T:System.Numerics.Complex"/> number is infinite (<see cref="M:System.Double.IsInfinity(System.Double)"/>).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsReal(System.Numerics.Complex)">
            <summary>
            Returns whether the <see cref="T:System.Numerics.Complex"/> number is purely real.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.IsRealNonNegative(System.Numerics.Complex)">
            <summary>
            Returns whether the <see cref="T:System.Numerics.Complex"/> number is purely real and negative.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Conjugate(System.Numerics.Complex)">
            <summary>
            Returns the <see cref="T:System.Numerics.Complex"/> conjugate of the number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.NormSquared(System.Numerics.Complex)">
            <summary>
            Gets the squared norm of the <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Exp(System.Numerics.Complex)">
            <summary>
            Returns the (natural) exponent of the given <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Log(System.Numerics.Complex)">
            <summary>
            Returns the (natural) logarithm of the given <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Pow(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Returns the given <see cref="T:System.Numerics.Complex"/> number to a power.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Root(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Returns the given <see cref="T:System.Numerics.Complex"/> number to root.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Squared(System.Numerics.Complex)">
            <summary>
            The square of the given <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.SquareRoot(System.Numerics.Complex)">
            <summary>
            The square root of the given <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.Norm(System.Numerics.Complex)">
            <summary>
            The norm of the given <see cref="T:System.Numerics.Complex"/> number.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.NormOfDifference(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            The squared norm of the difference of the given <see cref="T:System.Numerics.Complex"/> numbers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ComplexExtensions.ToComplex(System.String)">
            <summary>
            Parses the complex number in form of 'a + ib'. If the parsing fails an exception will be thrown.
            </summary>
            <param name="complexString">The complex number to parse.</param>
            <returns>The parsed complex number.</returns>
        </member>
        <member name="T:Telerik.Windows.Maths.AreaUnit">
            <summary>
            Enumeration of supported area units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.InternationalAcre">
            <summary>
            International acre "uk_acre" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.USSurveyAcre">
            <summary>
            U.S. survey/statute acre "us_acre" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareAngstrom">
            <summary>
            Square angstrom "ang2" or â€œang^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.Are">
            <summary>
            Are "ar" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareFeet">
            <summary>
            Square feet "ft2" or "ft^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.Hectare">
            <summary>
            Hectare "ha" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareInches">
            <summary>
            Square inches "in2" or "in^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareLightYear">
            <summary>
            Square light-year "ly2" or "ly^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareMeters">
            <summary>
            Square meters "m2" or "m^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.Morgen">
            <summary>
            Morgen "Morgen" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareMiles">
            <summary>
            Square miles "mi2" or "mi^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareNauticalMiles">
            <summary>
            Square nautical miles "Nmi2" or "Nmi^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquarePica">
            <summary>
            Square Pica "Picapt2", "Pica2", "Pica^2" or "Picapt^2" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AreaUnit.SquareYards">
            <summary>
            Square yards "yd2" or "yd^2" 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Converter.MultiplierPrefixValue(Telerik.Windows.Maths.MultiplierPrefix)">
            <summary>
            Returns the actual multiplier value corresponding to the given multiplier prefix.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Converter.MultiplierPrefixAbbreviation(Telerik.Windows.Maths.MultiplierPrefix)">
            <summary>
            Returns the abbreviation corresponding to the given multiplier prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Converter.MultiplierPrefixOfAbbreviation(System.String)">
            <summary>
            Returns the multiplier enumeration value corresponding to the given multiplier abbreviation.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
        </member>
        <member name="T:Telerik.Windows.Maths.DistanceUnit">
            <summary>
            Enumeration of supported distance units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Meter">
            <summary>
            	"m"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.StatuteMile">
            <summary>
            "mi"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.NauticalMile">
            <summary>
            "Nmi"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Inch">
            <summary>
            "in"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Foot">
            <summary>
            "ft"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Yard">
            <summary>
            "yd"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Angstrom">
            <summary>
            "ang"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Ell">
            <summary>
            "ell"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.LightYear">
            <summary>
            "ly"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Parsec">
            <summary>
            "parsec" or "pc"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Pica72">
            <summary>
            (1/72 inch)	"Picapt" or "Pica"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.Pica6">
            <summary>
            (1/6 inch)	"pica"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DistanceUnit.SurveyMile">
            
            U.S survey mile (statute mile)	 "survey_mi"
              
        </member>
        <member name="T:Telerik.Windows.Maths.EnergyUnit">
            <summary>
            Enumeration of supported energy units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.Joule">
            <summary>
            Joule "J"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.Erg">
            <summary>
            Erg "e"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.ThermodynamicCalorie">
            <summary>
            Thermodynamic calorie "c"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.ITCalorie">
            <summary>
            IT calorie "cal"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.ElectronVolt">
            <summary>
            Electron volt "eV" or "ev"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.HorsePowerPerHour">
            <summary>
            Horse power per hour "HPh" or "hh"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.WattPerHour">
            <summary>
            Watt per hour "Wh" or "wh"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.FootPound">
            <summary>
            Foot pound "flb"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.EnergyUnit.BTU">
            <summary>
            British thermal unit "BTU" or "btu"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.ForceUnit">
            <summary>
            Enumeration of supported force units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.ForceUnit.Newton">
            <summary>
            Newton "N"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.ForceUnit.Dyne">
            <summary>
            Dyne "dyn" or "dy"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.ForceUnit.Pound">
            <summary>
            Pound "lbf"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.ForceUnit.Pond">
            <summary>
            Pond "pond"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.InformationUnit">
            <summary>
            Enumeration of supported time units.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.MagnetismUnit">
            <summary>
            Enumeration of supported magnetism units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MagnetismUnit.Tesla">
            <summary>
            Tesla "T"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MagnetismUnit.Gauss">
            <summary>
            Gauss "ga"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.MultiplierPrefix">
            <summary>
            Enumerates the supported prefix multiplier.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.None">
            <summary>
            No multiplier.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Atto">
            <summary>
            Equals: 1E-18; Prefix: "a"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Centi">
            <summary>
            Equals: 0.01; Prefix: "c"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Deci">
            <summary>
            Equals: 0.1; Prefix: "d"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Dekao">
            <summary>
            Equals: 10; Prefix: "da" or "e"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Exa">
            <summary>
            Equals: 1E+18; Prefix: "E"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Femto">
            <summary>
            Equals: 1E-15; Prefix: "f"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Giga">
            <summary>
            Equals: 1E+09; Prefix: "G"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Hecto">
            <summary>
            Equals: 100; Prefix: "h"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Kilo">
            <summary>
            Equals: 1000; Prefix: "k"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Mega">
            <summary>
            Equals: 1E+06; Prefix: "M"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Micro">
            <summary>
            Equals: 1E-06; Prefix: "u"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Milli">
            <summary>
            Equals: 1E-03; Prefix: "m"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Nano">
            <summary>
            Equals: 1E-09; Prefix: "n"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Peta">
            <summary>
            Equals: 1E+15; Prefix: "P"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Pico">
            <summary>
            Equals: 1E-12; Prefix: "p"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Tera">
            <summary>
            Equals: 1E+12; Prefix: "T"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Yocto">
            <summary>
            Equals: 1E-24; Prefix: "y"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Yotta">
            <summary>
            Equals: 1E+24; Prefix: "Y"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Zepto">
            <summary>
            Equals: 1E-21; Prefix: "z"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Zetta">
            <summary>
            Equals: 1E+21; Prefix: "Z"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Kibi">
            <summary>
            Equals: 2^10 =1024; Prefix: "ki"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Mebi">
            <summary>
            Equals: 2^20 = 1048576; Prefix: "Mi"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Gibi">
            <summary>
            Equals: 2^30 = 1073741824; Prefix: "Gi" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Tebi">
            <summary>
            Equals: 2^40 = 1099511627776; Prefix: ""Ti" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Pebi">
            <summary>
            Equals: 2^50 = 1125899906842624; Prefix: ""Pi" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Exbi">
            <summary>
            Equals: 2^60 = 1152921504606846976; Prefix: "Ei"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Zebi">
            <summary>
            Equals: 2^70 = 1180591620717411303424; Prefix: "Zi" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MultiplierPrefix.Yobi">
            <summary>
            Equals: 2^80 = 1208925819614629174706176; Prefix: "Yi" 
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.PowerUnit">
            <summary>
            Enumeration of supported power units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PowerUnit.HorsePower">
            <summary>
            Horse power "HP" or "h"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PowerUnit.PferdeStarke">
            <summary>
            PferdestÃ¤rke "PS"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PowerUnit.Watt">
            <summary>
            Watt "W" or "w"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.PressureUnit">
            <summary>
            Enumeration of supported pressure units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PressureUnit.Pascal">
            <summary>
            Pascal "pa" or "p"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PressureUnit.Atmosphere">
            <summary>
            Atmosphere "atm" or "at"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PressureUnit.Mercury">
            <summary>
            Millimeters or mercury "mmHg"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PressureUnit.PSI">
            <summary>
            Pounds per square inch "psi"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PressureUnit.Torr">
            <summary>
            Torricelli unit "Torr"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.SpeedUnit">
            <summary>
            Enumeration of supported speed units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.SpeedUnit.AdmiralityKnot">
            <summary>
            The admirality knot "admkn"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.SpeedUnit.Knot">
            <summary>
            The knot "kn"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.SpeedUnit.MetersPerHour">
            <summary>
            Meters per hour "m/h" or "m/hr"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.SpeedUnit.MetersPerSecond">
            <summary>
            Meters per second "m/s" or "m/sec"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.SpeedUnit.MilesPerHour">
            <summary>
            Miles per hour "mph"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.TemperatureUnit">
            <summary>
            Enumeration of supported temperature units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TemperatureUnit.Celsius">
            <summary>
            Celsius "C" or "cel"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TemperatureUnit.Fahrenheit">
            <summary>
            Fahrenheit "F" or "fah"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TemperatureUnit.Kelvin">
            <summary>
            Kelvin "K" or "kel"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TemperatureUnit.Rankine">
            <summary>
            Rankine "Rank"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TemperatureUnit.Reaumur">
            <summary>
            Reaumur "Reau"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.TimeUnit">
            <summary>
            Enumeration of supported time units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TimeUnit.Year">
            <summary>
            A year "yr"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TimeUnit.Day">
            <summary>
            A day "d" or "day"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TimeUnit.Hour">
            <summary>
            An hour "hr"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TimeUnit.Minute">
            <summary>
            A minute "mn" or "min"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.TimeUnit.Second">
            <summary>
            A second "s" or "sec"
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.VolumeUnit">
            <summary>
            Enumeration of supported volume units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.Teaspoon">
            <summary>
             Teaspoon "tsp" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.ModernTeaspoon">
            <summary>
            Modern teaspoon "tspm" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.TableSpoon">
            <summary>
            Tablespoon "tbs" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.FluidOunce">
            <summary>
            Fluid ounce "oz" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.Cup">
            <summary>
            Cup "cup" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.USPint">
            <summary>
            U.S. pint "pt" (or "us_pt") 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.UKPint">
            <summary>
            U.K. pint "uk_pt" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.Quart">
            <summary>
            Quart "qt" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.ImperialQuart">
            <summary>
            Imperial quart (U.K.) "uk_qt" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.Gallon">
            <summary>
            Gallon "gal" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.ImperialGallon">
            <summary>
            Imperial gallon (U.K.) "uk_gal" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.Liter">
            <summary>
            Liter "l" or "L" ("lt") 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicAngstrom">
            <summary>
            Cubic angstrom "ang3" or "ang^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.USOilBarrel">
            <summary>
            U.S. oil barrel "barrel" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.USBushel">
            <summary>
            U.S. bushel "bushel" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicFeet">
            <summary>
            Cubic feet "ft3" or "ft^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicInch">
            <summary>
            Cubic inch "in3" or "in^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicLightYear">
            <summary>
            Cubic light-year "ly3" or "ly^3"
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicMeter">
            <summary>
            Cubic meter "m3" or "m^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicMile">
            <summary>
            Cubic Mile "mi3" or "mi^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicYard">
            <summary>
            Cubic yard "yd3" or "yd^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicNauticalMile">
            <summary>
            Cubic nautical mile "Nmi3" or "Nmi^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.CubicPica">
            <summary>
            Cubic Pica "Picapt3", "Picapt^3", "Pica3" or "Pica^3" 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.GrossRegisteredTon">
            <summary>
            Gross Registered Ton "GRT" ("regton") 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VolumeUnit.MeasurementTon">
            <summary>
            Measurement ton (freight ton) "MTON" 
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.IClusterPoint">
            <summary>
            Describes the necessary info for a point to be clustered as part of the k-means algorithm.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.ClusterPoint">
            <summary>
            Default implementation of the <see cref="T:Telerik.Windows.Maths.IClusterPoint"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ClusterPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ClusterPoint"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ClusterPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ClusterPoint"/> class.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="T:Telerik.Windows.Maths.KMeans">
            <summary>
            Clustering of arbitrary pointsets using the k-means algorithm.
            See http://en.wikipedia.org/wiki/K-means_clustering .
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.KMeans.ClusterWithoutParallelism(System.Collections.Generic.List{Telerik.Windows.Maths.IClusterPoint},System.Int32)">
            <summary>
            Clusters (without parallelism) the specified points using the k-means algorithm.
            </summary>
            <param name="points">The points.</param>
            <param name="clusterCount">The cluster count.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.KMeans.Cluster(System.Collections.Generic.List{Telerik.Windows.Maths.IClusterPoint},System.Int32)">
            <summary>
            Clusters the specified points using the k-means algorithm.
            </summary>
            <remarks>This method uses by default parallelism, see the <see cref="M:Telerik.Windows.Maths.KMeans.ClusterWithoutParallelism(System.Collections.Generic.List{Telerik.Windows.Maths.IClusterPoint},System.Int32)"/> method if you do not wish to use parallel processing.</remarks>
            <param name="points">The points which should be clustered.</param>
            <param name="clusterCount">The number of expected clusters.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.KMeans.StochasticSource">
            <summary>
            Gets or sets the stochastic source used to spread the centers of the clusters.
            </summary>
            <value>
            The stochastic source.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.AddressType">
            <summary>
            A flag enumeration of option when generating a random address.
            </summary>
            <seealso cref="M:Telerik.Windows.Maths.DataGenerator.RandomAddress(Telerik.Windows.Maths.AddressType)"/>
        </member>
        <member name="F:Telerik.Windows.Maths.AddressType.CompanyName">
            <summary>
            Include a random company name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AddressType.StateName">
            <summary>
            Include a random state name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.AddressType.CountryName">
            <summary>
            Include a random country name.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.CaseType">
            <summary>
            Defines an upper or lower case type.
            </summary>
            <seealso cref="M:Telerik.Windows.Maths.DataGenerator.RandomLetter(Telerik.Windows.Maths.CaseType)"/>.
        </member>
        <member name="T:Telerik.Windows.Maths.DataGenerator">
            <summary>
            A collection of methods related to random data generation.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DataGenerator.Rand">
            <summary>
            The randomizer at the basis of all.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomLipsum(System.Int32)">
            <summary>
            Returns a random paragraph of lipsum text of the specified length.
            </summary>
            <param name="numWords">The num words; default is 25 and must be more than 5.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomPersonNameCollection(Telerik.Windows.Maths.PersonDataType,System.Int32)">
            <summary>
            Returns a collection of person names.
            </summary>
            <param name="type">The option specifying the format of the returned names.</param>
            <param name="count">The amount of person names to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomPersonName(Telerik.Windows.Maths.PersonDataType)">
            <summary>
            Returns a random person name.
            </summary>
            <param name="type">The option specifying the format of the returned name. Default is <see cref="F:Telerik.Windows.Maths.PersonDataType.FullNameWithMiddleInitial"/>.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.ResetMarkovChains">
            <summary>
            Resets the markov chains and re-initializes on the basis of the data in the <see cref="T:Telerik.Windows.Maths.DataStore"/>.
            Use this method if you have defined your own custom arrays in the <see cref="T:Telerik.Windows.Maths.DataStore"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomCityName">
            <summary>
            Returns a random city name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomZipCode">
            <summary>
            Returns a random zip code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomStateName">
            <summary>
            Returns a random state name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomCountryName">
            <summary>
            Returns a random country name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomCompanyName">
            <summary>
            Returns a random company name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomDocumentTitleCollection(System.Int32)">
            <summary>
            Generates a collection of random document titles.
            </summary>
            <param name="count">The amount of items to generate.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomStreetName(System.Boolean)">
            <summary>
            Returns a random street name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomAddress(Telerik.Windows.Maths.AddressType)">
            <summary>
            Generates a random address.
            </summary>
            <remarks>The address type if a flag type so you can combine the options. The default includes all options.</remarks>
            <param name="type">The address type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomAddressCollection(Telerik.Windows.Maths.AddressType,System.Int32)">
            <summary>
            Returns a collection of address.
            </summary>
            <param name="type">The option specifying the format of the returned addresses.</param>
            <param name="count">The amount of addresses to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomTextVariation(Telerik.Windows.Maths.TextSamples,System.Int32)">
            <summary>
            Generates a random variation of a philosophical text.
            </summary>
            <param name="style">The style of text to base the variation on.</param>
            <param name="size">The size of the text to generate.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomFileExtension(Telerik.Windows.Maths.FileExtensionType)">
            <summary>
            Returns a random file extension.
            </summary>
            <remarks>The optional <see cref="T:Telerik.Windows.Maths.FileExtensionType"/> is a flag enumeration and you can combine different types.</remarks>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.GetFileExtensionDescription(System.String)">
            <summary>
            Gets the file extension description, if available.
            </summary>
            <param name="extension">The extension to look up.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomTextVariation(System.String,System.Int32)">
            <summary>
            Generates a variation on the given text sample.
            </summary>
            <param name="sample">The sample on which the variation is based.</param>
            <param name="size">The size of the generated text.</param>
            <seealso cref="T:Telerik.Windows.Maths.MarkovTextGenerator"/>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomLetter(Telerik.Windows.Maths.CharType)">
            <summary>
            Returns a random letter.
            </summary>
            <param name="charType">The types of characters to include in the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomString(System.Int32,Telerik.Windows.Maths.CharType)">
            <summary>
            Generates a random string.
            </summary>
            <param name="size">The length of the generated string.</param>
            <param name="charType">The types of characters to include in the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomString(System.Int32,System.String)">
            <summary>
            Generates a random string on the basis of the given input string.
            </summary>
            <param name="size">The length of the generated string.</param>
            <param name="input">The string from which a new random string will be generated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomDate(System.DateTime,System.DateTime)">
            <summary>
            Generates a random date within the specified interval.
            </summary>
            <param name="minDate">The start date of the interval.</param>
            <param name="maxDate">The end date of the interval.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            Returns a random <c>TimeSpan</c> within the given interval.
            </summary>
            <param name="minDate">The min date.</param>
            <param name="maxDate">The max date.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DataGenerator.RandomDate">
            <summary>
            Returns a random date within the full span of the <c>DateTime</c> range.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.DateIntervalType">
            <summary>
            A specification of a <c>DateTime</c> interval.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.DateTimeUtil">
            <summary>
            Utility class related to <c>DateTime</c>.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.MarkovLink`1">
            <summary>
            An element of a Markov chain.
            </summary>
            <typeparam name="T">link type</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.#ctor(`0)">
            <summary>
            create a new link
            </summary>
            <param name="data">value of the item in sequence</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.Process(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            process the input in window sized chunks
            </summary>
            <param name="input">the sample set</param>
            <param name="length">size of sequence window</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.ProcessWindow(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            process the window to construct the chain
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.Process(`0)">
            <summary>
            process an item following us
            keep track of how many times
            we are followed by each item
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.Find(`0)">
            <summary>
            find a follower of this link
            </summary>
            <param name="follower">The follower.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.SelectRandomLink">
            <summary>
            select a random follower weighted
            towards followers that followed us
            more often in the sample set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.Find(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            find a window of followers that
            are after this link, returns where
            the last link if found, or null if
            this window never occured after this link
            </summary>
            <param name="window">the sequence to look for</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovLink`1.Generate(`0,System.Int32,System.Int32)">
            <summary>
            a generated set of followers based
            on the likelyhood of sequence steps
            seen in the sample data
            </summary>
            <param name="start">a seed value to start the sequence with</param>
            <param name="length">how bug a window to use for sequence steps</param>
            <param name="max">maximum size of the set produced</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.MarkovLink`1.ChildOccurances">
            <summary>
            Total number of incidences after this link
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.MarkovChain`1">
            <summary>
            A generic Markov chain implementation.
            </summary>
            <typeparam name="T">The data type of the elements.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovChain`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MarkovChain`1"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovChain`1.Generate(System.Int32)">
            <summary>
            Generates a new list of a certain size.
            </summary>
            <param name="size">The size of the result.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovChain`1.Generate(`0,System.Int32)">
            <summary>
            Generates a new list of a certain size, starting with the given item.
            </summary>
            <param name="start">The item to start with</param>
            <param name="size">The size of the result.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.MarkovNameGenerator">
            <summary>
            A MArkov chain implementation geared towards the generation of single words.
            See for example http://en.wikipedia.org/wiki/Markov_chain .
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovNameGenerator.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MarkovNameGenerator"/> class.
            </summary>
            <param name="sampleNames">The sample names.</param>
            <param name="order">The order.</param>
            <param name="minLength">Length of the min.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovNameGenerator.Reset">
            <summary>
            Resets the collection of used names.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.MarkovNameGenerator.EnsureUniqueness">
            <summary>
            Gets or sets whether the generated items are unique across the lifetime of this generator.
            </summary>
            <value>
              <c>true</c> if uniqueness should be ensured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.MarkovTextGenerator.Generate(System.String,System.Int32,System.Int32)">
            <summary>
            Generates a new text variation based on the given sample.
            </summary>
            <param name="sample">The sample on which the variation will be based..</param>
            <param name="size">The size of the text to generate.</param>
            <param name="windowSize">Size of the window.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.PersonDataType">
            <summary>
            Defines a type of generated person data, see <see cref="M:Telerik.Windows.Maths.DataGenerator.RandomPersonName(Telerik.Windows.Maths.PersonDataType)"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.MaleFirstName">
            <summary>
            A male first name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.FemalFirstName">
            <summary>
            A female first name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.FirstName">
            <summary>
            A random male or female first name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.FamilyName">
            <summary>
            A random family name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.FullName">
            <summary>
            A random male or female first name with family name.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PersonDataType.FullNameWithMiddleInitial">
            <summary>
            A random male or female first name with middle initial and family name.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.TextSamples">
            <summary>
            A collection of predefined text samples on which a Markov text generation can be based.
            </summary>
            <seealso cref="T:Telerik.Windows.Maths.MarkovTextGenerator"/>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.Philosophy">
            <summary>
            Generates a random variation of a philosophical text.
            </summary>
            <remarks>Based on Hume's Treatise of Human Nature; http://www.gutenberg.org/cache/epub/4705/pg4705.txt .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.Latin">
            <summary>
            Generates a random variation of a Latin text.
            </summary>
            <remarks>Based on the Philosophiae Naturalis Principia Mathematica of Isaac Newton; http://www.gutenberg.org/cache/epub/28233/pg28233.txt . </remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.Biology">
            <summary>
            Generates a random variation of a biology text.
            </summary>
            <remarks>Based on the Origin of Species by Charles Darwin; http://www.gutenberg.org/cache/epub/22764/pg22764.txt .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.Spanish">
            <summary>
            Generates a random variation of a Spanish text.
            </summary>
            <remarks>Based on Los cuatro jinetes del apocalipsis by Vicente  Blasco IbÃ¡Ã±ez; http://www.gutenberg.org/cache/epub/24536/pg24536.txt .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.Bulgarian">
            <summary>
            Generates a random variation of a Bulgarian text.
            </summary>
            <remarks>Based on Epical Songs by Pencho Slaveykov; http://www.gutenberg.org/cache/epub/3433/pg3433.txt .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.English1">
            <summary>
            Generates a random variation of an English text.
            </summary>
            <remarks>Based on the Illiad by Homer; http://www.gutenberg.org/cache/epub/2199/pg2199.txt .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.TextSamples.English2">
            <summary>
            Generates a random variation of an English text.
            </summary>
            <remarks>Based on The Hound of the Baskerville by Sir Arthur Conan Doyle; http://www.gutenberg.org/cache/epub/2852/pg2852.txt .</remarks>
        </member>
        <member name="T:Telerik.Windows.Maths.AVLTree`1">
            <summary>
            The AVL Tree data structure.
            </summary>
            <typeparam name="TData">
            </typeparam>
            <remarks>
            See http://en.wikipedia.org/wiki/AVL_tree .
            </remarks>
        </member>
        <member name="T:Telerik.Windows.Maths.BinarySearchTreeBase`1">
            <summary>
            Base implementation of the <see cref="T:Telerik.Windows.Maths.ISearchTree`1"/> interface.
            </summary>
            <typeparam name="T">The data type contained in this collection.</typeparam>
            <seealso cref="T:Telerik.Windows.Maths.RedBlackTree`2"/>
        </member>
        <member name="T:Telerik.Windows.Maths.ISearchTree`1">
            <summary>
            Describes data structures used for searching.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ISearchTree`1.DepthFirstTraversal(Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Performs a depth first traversal on the search tree.
            </summary>
            <param name="visitor">The visitor to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.ISearchTree`1.GetOrderedEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Maths.ISearchTree`1.Maximum">
            <summary>
            Gets the maximal item in the tree.
            </summary>
            <value>The maximum item in the tree.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.ISearchTree`1.Minimum">
            <summary>
            Gets the smallest item in the tree.
            </summary>
            <value>The smallest item in the tree.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Maths.ISearchTree`1"/> is empty.</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinarySearchTreeBase`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinarySearchTreeBase`1"/> class.
            </summary>
            <param name="comparer">The comparer to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinarySearchTreeBase`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.Contains(`0)">
            <summary>
            Determines whether the item is in this tree.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.DepthFirstTraversal(Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Depthes the first traversal.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.GetOrderedEnumerator">
            <summary>
            Gets the ordered enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindMaximumNode(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Finds the maximum node.
            </summary>
            <param name="startNode">The start node.</param>
            <returns>The maximum node below this node.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindMinimumNode(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Finds the minimum node.
            </summary>
            <param name="startNode">The start node.</param>
            <returns>The minimum node below this node.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindMaximumNode">
            <summary>
            Find the maximum node.
            </summary>
            <returns>The maximum node.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindMinimumNode">
            <summary>
            Find the minimum node.
            </summary>
            <returns>The minimum node.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindNode(`0)">
            <summary>
            Finds the node containing the specified data key.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The node with the specified key if found.  If the key is not in the tree, this method returns null.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.FindNode``1(``0,Telerik.Windows.Maths.BinarySearchTreeBase{`0}.CustomComparison{``0})">
            <summary>
            Finds the node that matches the custom delegate.
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="value">The value.</param>
            <param name="customComparison">The custom comparison.</param>
            <returns>The item if  found, else null.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.RemoveItem(`0)">
            <summary>
            Removes the item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>An indication of whether the item has been removed from the tree.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinarySearchTreeBase`1.VisitNode(Telerik.Windows.Maths.BinaryTree{`0},Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Visits the node in an in-order fashion.
            </summary>
            <param name="node">The node.</param>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.Maximum">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.Minimum">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinarySearchTreeBase`1.Tree">
            <summary>
            Gets or sets the tree.
            </summary>
            <value>
            The tree.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.BinarySearchTreeBase`1.CustomComparison`1">
            <summary>
            A custom comparison between some search value and the type of item that is kept in the tree.
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.AVLTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.AVLTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.AVLTree`1.BalanceAt(Telerik.Windows.Maths.BinaryTree{`0},System.Int32)">
            <summary>
            Balances an AVL Tree node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="balance">
            The balance.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.AVLTree`1.GetBalance(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Returns the right height minus the left height of the binary branch.
            </summary>
            <param name="root">
            The node for which the balance needs to be returned.
            </param>
            <returns>
            The balance at the given node.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.AVLTree`1.RotateLeft(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Rotates a node to the left within an AVL Tree.
            </summary>
            <remarks>The pivot node becomes the root if the given node was the root before.</remarks>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.AVLTree`1.RotateRight(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Rotates a node to the right within an AVL Tree.
            </summary>
            <remarks>The pivot node becomes the root if the given node was the root before.</remarks>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="P:Telerik.Windows.Maths.AVLTree`1.Root">
            <summary>
            Returns the AVL Node of the tree.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.BinaryTree`1">
            <summary>
            Standard implementation of a binary tree.
            </summary>
            <typeparam name="TData">The data type on which the tree is based.</typeparam>
            <seealso cref="T:Telerik.Windows.Maths.RedBlackTree`2"/>
        </member>
        <member name="T:Telerik.Windows.Maths.ITree`1">
            <summary>
            An interface for the tree data structure.
            </summary>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ITree`1.Add(Telerik.Windows.Maths.ITree{`0})">
            <summary>
            Adds the specified child to the tree.
            </summary>
            <param name="child">The child to add..</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ITree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node for which the given predicate holds true.
            </summary>
            <param name="condition">The condition to test on the data item.</param>
            <returns>The fist node that matches the condition if found, otherwise null.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ITree`1.GetChild(System.Int32)">
            <summary>
            Gets the child at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The child at the specified index.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ITree`1.Remove(Telerik.Windows.Maths.ITree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns>An indication of whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="P:Telerik.Windows.Maths.ITree`1.Data">
            <summary>
            Gets the data held in this node.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.ITree`1.Degree">
            <summary>
            Gets the degree of this node.
            </summary>
            <value>The degree of this node.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.ITree`1.Height">
            <summary>
            Gets the height of this tree.
            </summary>
            <value>The height of this tree.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.ITree`1.IsLeafNode">
            <summary>
            Gets a value indicating whether this instance is leaf node.
            </summary>
            <value>
            	<c>true</c> if this instance is leaf node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.ITree`1.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinaryTree`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.#ctor(`0,Telerik.Windows.Maths.BinaryTree{`0},Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinaryTree`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Add(`0)">
            <summary>
            Adds the given item to this tree.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Add(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="subtree">The subtree.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Maths.BinaryTree`1"/> is full.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subtree"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.BreadthFirstTraversal(Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Performs a breadth first traversal on this tree with the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Clear">
            <summary>
            Clears this tree of its content.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Contains(`0)">
            <summary>
            Returns whether the given item is contained in this collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if is contained in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the tree to the given array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.DepthFirstTraversal(Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Performs a depth first traversal on this tree with the specified visitor.
            </summary>
            <param name="visitor">The ordered visitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitor"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Find(`0)">
            <summary>
            Seeks the tree node containing the given data.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.FindNode(System.Predicate{`0})">
            <summary>
            Finds the node with the specified condition.  If a node is not found matching
            the specified condition, null is returned.
            </summary>
            <param name="condition">The condition to test.</param>
            <returns>The first node that matches the condition supplied.  If a node is not found, null is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.GetChild(System.Int32)">
            <summary>
            Gets the left (index zero) or right (index one) subtree.
            </summary>
            <param name="index">The index of the child in question.</param>
            <returns>The child at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>There are at most two children at each level of a binary tree, the index can hence only be zero or one.</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Remove(`0)">
            <summary>
            Removes the specified item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Remove(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns>Returns whether the child was found (and removed) from this tree.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.RemoveLeft">
            <summary>
            Removes the left child.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.RemoveRight">
            <summary>
            Removes the left child.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.Telerik#Windows#Maths#ITree{TData}#Remove(Telerik.Windows.Maths.ITree{`0})">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.FindMaximumChildHeight">
            <summary>
            Finds the maximum height between the child nodes.
            </summary>
            <returns>The maximum height of the tree between all paths from this node and all leaf nodes.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinaryTree`1.AddItem(Telerik.Windows.Maths.BinaryTree{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="subtree">The subtree.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Count">
            <summary>
            Gets the number of children at this level, which can be at most two.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Data">
            <summary>
            Gets or sets the data of this tree.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Degree">
            <summary>
            Gets the degree.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.IsComplete">
            <summary>
            Gets whether both sides are occupied, i.e. the left and right positions are filled.
            </summary>
            <value>
              <c>true</c> if this instance is full; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.IsEmpty">
            <summary>
            Gets a value indicating whether this tree is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.IsLeafNode">
            <summary>
            Gets whether this is a leaf node, i.e. it doesn't have children nodes.
            </summary>
            <value>
            	<c>true</c> if this instance is leaf node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.IsReadOnly">
            <summary>
            Returns <c>false</c>; this tree is never read-only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Left">
            <summary>
            Gets or sets the left subtree.
            </summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
            <value>The parent of the current node.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Right">
            <summary>
            Gets or sets the right subtree.
            </summary>
            <value>The right subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Root">
            <summary>
            Gets the root of the binary tree.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Telerik#Windows#Maths#ITree{TData}#Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinaryTree`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Maths.BinaryTree`1"/> at the specified index.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.ComparisonComparer`1">
            <summary>
            <see cref="T:System.Collections.Generic.IComparer`1"/> implementation based on a <see cref="P:Telerik.Windows.Maths.ComparisonComparer`1.Comparison"/>.
            </summary>
            <typeparam name="T">The data type being compared.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ComparisonComparer`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Compares the given items.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.ComparisonComparer`1.Comparison">
            <summary>
            Gets or sets the comparison used in this comparer.
            </summary>
            <value>The comparison used in this comparer.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.KeyValuePairComparer`2">
            <summary>
            A comparer of key-value pairs based on a comparison of the respective keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValuePairComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.KeyValuePairComparer`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValuePairComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.KeyValuePairComparer`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValuePairComparer`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.KeyValuePairComparer`2"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValuePairComparer`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compares the two keypairs.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValuePairComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.MupleComparer`2">
            <summary>
            A 2-tuple comparer assuming that the first entry acts as a comparable key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.MupleComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MupleComparer`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.MupleComparer`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MupleComparer`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MupleComparer`2.Compare(Telerik.Windows.Maths.Muple{`0,`1},Telerik.Windows.Maths.Muple{`0,`1})">
            <summary>
            Compares the two muples.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MupleComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.MupleComparer`2.DefaultComparer">
            <summary>
            Gets the default comparer for the type of association specified.
            </summary>
            <value>The default comparer.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.ReverseComparer`1">
            <summary>
            Reverses another comparer.
            </summary>
            <typeparam name="T">The data type of the comparer.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ReverseComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ReverseComparer`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ReverseComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ReverseComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.ReverseComparer`1.Comparer">
            <summary>
            Gets or sets the comparer used in this instance.
            </summary>
            <value>The comparer.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="T:Telerik.Windows.Maths.Constants">
            <summary>
            Mathematical, physical and framework related constants.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Epsilon">
            <summary>
            The epsilon aka infinitesimal; a small value to compare floating numbers.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Catalan">
            <summary>
            The Catalan number.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Catalan_number .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.E">
            <summary>
            The Euler constant.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/E_%28mathematical_constant%29 .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.EulerGamma">
            <summary>
            The Euler-Mascheroni constant.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Euler_constant .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Glaisher">
            <summary>
            Glaisher-Kinkelin constant.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Glaisher%E2%80%93Kinkelin_constant .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.GoldenRatio">
            <summary>
            The golden ratio; (1+Sqrt[5])/2.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Golden_ratio .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.InverseE">
            <summary>
            The inverse of the Euler constant; 1/[e].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.InversePi">
            <summary>
            The inverse of Pi; 1/[Pi].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.InvSqrt2Pi">
            <summary>
            The inverse of the square root of twice Pi; 1/Sqrt[2*Pi].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.InvSqrtPi">
            <summary>
            The inverse of the square root of Pi; 1/Sqrt[Pi].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Khinchin">
            <summary>
            The Khinchin constant.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Khinchin_constant .</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.SmallestNumberGreaterThanZero">
            <summary>
            2^(-1074)
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Log2E">
            <summary>
            The logorithm of <c>E</c> in base 2; log[2](e).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Ln2">
            <summary>
            The logorithm of 2 in base <c>e</c>; log[e](2).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Ln10">
            <summary>
            The logorithm of <c>10</c> in base e; log[e](10).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.LnPi">
            <summary>
            The logorithm of <c>Pi</c> in base e; log[e](10).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Pi">
            <summary>
            The well-know Pi constants.
            </summary>
            <remarks>This one has a higher precision than the .Net system one.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.PiOver180">
            <summary>
            Pi over 180; Pi/180.
            </summary>
            <seealso cref="M:Telerik.Windows.Maths.Trigonometry.DegreesToRadians(System.Double)"/>
            <seealso cref="M:Telerik.Windows.Maths.Trigonometry.RadiansToDegrees(System.Double)"/>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.PiOver2">
            <summary>
            Pi over 2; [Pi]/2.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.PiOver4">
            <summary>
            Pi over 4; [Pi]/4.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Sqrt1Over2">
            <summary>
            The square root of 1/2.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Sqrt2">
            <summary>The square root of two.</summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Sqrt2Pi">
            <summary>
            The square root of two time Pi; Sqrt[2*Pi].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.Sqrt3DividedBy2">
            <summary>The square root of 3, divided by two; Sqrt[3]/2.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.SqrtPi">
            <summary>
            The square root of Pi; Sqrt[Pi].
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.SpeedOfLight">
            <summary>
            The speed of light (in vacuum) in [m s^-1].
            See http://en.wikipedia.org/wiki/Speed_of_light .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.PlancksConstant">
            <summary>
            The Planck's constant in [J s = m^2 kg s^-1].
            See http://en.wikipedia.org/wiki/Planck_constant .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.PlancksLength">
            <summary>
            The Planck length in [h_bar/(m_p*c_0)].
            See http://en.wikipedia.org/wiki/Plancks_length .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.GravitationalConstant">
            <summary>
            The Newtonian constant in [m^3 kg^-1 s^-2].
            See http://en.wikipedia.org/wiki/Gravitational_Constant .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.MagneticPermeability">
            <summary>
            The magnetic permeability (in vacuum) in [kg m s^-2 A^-2].
            See http://en.wikipedia.org/wiki/Magnetic_Permeability .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.ElectricPermittivity">
            <summary>
            The electric permittivity (in vacuum) in [s^4 kg^-1 A^2 m^-3].
            See http://en.wikipedia.org/wiki/Electric_Permittivity .
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Constants.RelativeAccuracy">
            <summary>
            2^(-53)
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Edge`2">
            <summary>
            Generic implementation of the <see cref="T:Telerik.Windows.Maths.IEdge`2"/> interface.
            </summary>
            <seealso cref="T:Telerik.Windows.Maths.Node`2"/>
        </member>
        <member name="T:Telerik.Windows.Maths.IEdge`2">
            <summary>
            Graph analysis link description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Maths.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Maths.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Maths.IEdge`2.Clone">
            <summary>
            Returns a shallow copy of this link.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IEdge`2.GetComplementaryNode(Telerik.Windows.Maths.INode{`0,`1})">
            <summary>
            Gets the other node of this link.
            </summary>
            <param name="node">
            The complementary node which defines this link.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IEdge`2.Reverse">
            <summary>
            Inverts this link by changing its direction.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.IEdge`2.Id">
            <summary>
            Gets or sets the identifier of this link.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.IEdge`2.Sink">
            <summary>
            Gets or sets the sink of this link, i.e. the node at the end of the link.
            </summary>
            <value>
            The sink node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.IEdge`2.Source">
            <summary>
            Gets or sets the source of this link, i.e. the node at the beginning of the link.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.IEdge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Edge`2.reversed">
            <summary>
            The <see cref="P:Telerik.Windows.Maths.Edge`2.IsReversed"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Edge`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Edge`2"/> class.
            </summary>
            <param name="connection">The connection on which this link is based.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.Clone">
            <summary>
            Returns a (shallow) clone of this link.
            </summary>
            <remarks>
            The following properties are being cloned: 
            <list type="bullet">
            <item>
            <description>The identifier (<see cref="P:Telerik.Windows.Maths.Edge`2.Id">Id</see>)</description></item>
            <item>
            <description>The weight (<see cref="P:Telerik.Windows.Maths.Edge`2.Weight">Weight</see>)</description></item>
            <item>
            <description>The segment index (<see cref="P:Telerik.Windows.Maths.Edge`2.SegmentIndex">SegmentIndex</see>)</description></item>
            <item>
            <description>The points (<see cref="P:Telerik.Windows.Maths.Edge`2.Points">Points</see>).</description></item></list>
            </remarks>
            <returns>
            A clone of this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.GetComplementaryNode(Telerik.Windows.Maths.INode{Telerik.Windows.Maths.Node{`0,`1},Telerik.Windows.Maths.Edge{`0,`1}})">
            <summary>
            Returns the opposite or complementary node of the given one.
            </summary>
            <param name="node">
            The node whose complement is looked for.
            </param>
            <returns>
            <c>null</c> if the node is not part of this link, otherwise the opposite or complementary node with respect to this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.GetBounds">
            <summary>
            Gets the bounding rectangle of this entity.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.GetOppositeNode(Telerik.Windows.Maths.Node{`0,`1})">
            <summary>
            Returns the node at the opposite end of the link.
            </summary>
            <param name="node">
            The a Node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.SetPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the control points (<see cref="P:Telerik.Windows.Maths.Edge`2.Points"/>) of this link.
            </summary>
            <param name="points">
            The points defining this link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Edge`2.Reverse">
            <summary>
            Reverses the direction of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.NumberOfVirtualNodes">
            <summary>
            Gets or sets the number of virtual nodes which have been inserted during the process of breaking layer-crossing links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.IsReversed">
            <summary>
            Gets wheter link has been reversed (using the <see cref="M:Telerik.Windows.Maths.Edge`2.Reverse"/> method).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Connection">
            <summary>
            Gets the associated <see cref="!:IConnection"/> object.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Points">
            <summary>
            Gets or sets the points defining the link.
            </summary>
            <remarks>This also defines eventually the <see cref="!:IConnection"/> visual if it's a polyline or some other multi-point visual.</remarks>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.PropertyBag">
            <summary>
            Gets or sets the dictionary of runtime/layout properties.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.SegmentIndex">
            <summary>
            Gets or sets index of the segment.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Id">
            <summary>
            Gets or sets identifier.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Sink">
            <summary>
            Gets the destination (target, end) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.Source">
            <summary>
            Gets the source (origin, start) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Edge`2.OutgoingLink">
            <summary>
            Gets or sets whether this is an outgoing link.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Graph`2">
            <summary>
            Base graph class for the various incarnations in the graph analysis.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The graph is directed by default (<code lang="C#">IsDirected =
            true</code>)</description></item>
            <item>
            <description>The adjacency structure is not centralized but resides in the
            Outgoing and Incoming collection attached to the
            Nodes.</description></item></list>
            </remarks>
            <typeparam name="TNode">The data type of the node which should be an
            implementation of the <see cref="T:Telerik.Windows.Maths.INode`2">INode{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
            <typeparam name="TLink">The data type of the edge which should be an
            implementation of the <see cref="T:Telerik.Windows.Maths.IEdge`2">IEdge{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Maths.Graph`2.isDirected">
            <summary>
            The <see cref="P:Telerik.Windows.Maths.Graph`2.IsDirected"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Graph`2"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.#ctor(Telerik.Windows.Maths.Graph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Graph`2"/> class.
            </summary>
            <param name="graph">The graph content to start with. Note that references will be added, not clones.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AddLink(`0,`0)">
            <summary>
            Adds a link to this graph.
            </summary>
            <param name="source">
            The source of the link.
            </param>
            <param name="sink">
            The sink of the link.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AddLink(`1)">
            <summary>
            Adds the givven link to the graph. It will add the sink and source nodes to the <see cref="P:Telerik.Windows.Maths.Graph`2.Nodes"/> collection if they are not yet
            part of it.
            </summary>
            <param name="link">
            The link to add.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AddNode(`0)">
            <summary>
            Adds the given node to the graph.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AddNodes(`0[])">
            <summary>
            Adds a series of nodes to the graph.
            </summary>
            <param name="nodes">
            The nodes.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AreConnected(`0,`0,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="n">A node.</param>
            <param name="m">Another node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
            <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AreConnected(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="i">The id of the first node.</param>
            <param name="j">The id of the second node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
              <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AssignIdentifiers">
            <summary>
            Assigns to each link and node an identifier based on their collection listIndex.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.FindEdge(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds the edge with the specified identifiers.
            </summary>
            <param name="i">The id of the source.</param>
            <param name="j">The id of the sink.</param>
            <param name="strict">If set to <c>true</c> the found link has to go from i to j.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.FindNode(System.Int32)">
            <summary>
            Finds the node with the specified identifier.
            </summary>
            <param name="id">The id to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.FindTreeRoot">
            <summary>
            Attempts to find a tree root by looking at the longest paths in the graph.
            </summary>
            <remarks>The algorithms looks for all shortest paths between all vertices, which means it will also function for disconnected graphs but will return the root
            of the tree with longest path.</remarks>
            <returns>A tree root or <c>null</c> is none was found.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.GetConnectedComponents">
            <summary>
            Returns the connected components of this graph.
            </summary>
            <returns>
            The list of connected components.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.GetNextIdInNodes(System.Int32)">
            <summary>
            Gets the next identifier of the nodes sequence.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.HaveUniqueIdentifiers">
            <summary>
            Ensures the unique identifiers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.EnsureUniqueIdentifiers">
            <summary>
            Ensures that the graph nodes all have a unique identifier assigned.
            </summary>
            <remarks>If the nodes do have unique identifiers nothing will be altered.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.NumberOfComponents">
            <summary>
            Returns the number of (connected) components.
            </summary>
            <example>
            The following example create two components; 
            <para> </para>
            <code lang="C#">var g = new Graph&lt;Node, Edge&gt;();
            for (var i = 0; i &lt; 4; i++) g.AddNode(new Node(1, true));
            g.AddLink(g.Nodes[0], g.Nodes[1]);
            g.AddLink(g.Nodes[2], g.Nodes[3]);
            var count = g.NumberOfComponents();</code>
            .</example>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.NumberOfComponents(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            Returns the number of connected components.
            </summary>
            <param name="componentMap">The component map as a dictionary where the key is the node identifier and the value is the number of the connected component to which the node belongs.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.RemoveAllLinksFrom(`0)">
            <summary>
            Detaches all links from from the given node and removes them from the graph structure.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.RemoveLink(`1)">
            <summary>
            Removes the link from the graph.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.RemoveNode(`0)">
            <summary>
            Removes the given node from this graph.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.RenumberNodes(System.Int32)">
            <summary>
            Assigns a new identifier to the nodes.
            </summary>
            <param name="startId">The number to start the numbering from.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.ToLinkListString">
            <summary>
            Returns a string representation of the incidence structure of this graph.
            </summary>
            <example>
            A diagram with links between identifier 1 and 2, 2 and 3, 3 and 4 will result in
            a string
            <para><code lang="C#">{"1,2", "2,3",
            "3,4"}</code></para>.
            </example>
            <seealso cref="M:Telerik.Windows.Maths.Graph`2.ToLinksList">ToLinksList</seealso>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.ToLinksList">
            <summary>
            Returns the links structure of this graph as a list of identifier tuples.
            </summary>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Maths.Graph`2.ToLinkListString"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.TopologicalSort(System.Boolean)">
            <summary>
            Is a linear ordering of its vertices such that, for every edge uv, u comes
            before v in the ordering. See Wikipedia for example;
            http://en.wikipedia.org/wiki/Topological_sorting.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The sorting is not unique.</description></item>
            <item>
            <description>The graph has to be acyclic in order to have a topological
            sort.</description></item>
            <item>
            <description>The sorting works on disconnected
            graphs.</description></item></list>
            </remarks>
            <param name="forceNewIdentifier"></param>
            <returns>
            The topologically sorted sequence of node identifiers or <c>null</c> is the graph has cycles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.ShortestPaths">
            <summary>
            Gets the shortests path lengths between each two vertices.
            </summary>
            <returns>
            A dictionary keyed with the node id's and value equal to the path lengths.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AreInSameComponent(System.Int32,System.Int32)">
            <summary>
            Returns whether the two nodes with specified ide's are the in same component.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.DijkstraShortestPath(`0,`0)">
            <summary>
            Returns the shortest path between two nodes using the Dijkstra algorithm.
            </summary>
            <param name="source">The node from where to start.</param>
            <param name="target">The node where the shortest path should end.</param>
            <returns>The shortest path, if any.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.DijkstraShortestPath(System.Int32,System.Int32)">
            <summary>
            Returns the shortest path between two nodes using the Dijkstra algorithm.
            </summary>
            <param name="sourceId">The identifier of the node from where to start.</param>
            <param name="targetId">The identifier of the node where the shortest path should end.</param>
            <returns>The shortest path, if any.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.FindLongestPath">
            <summary>
            Finds the longest path in this (directed acyclic) graph.
            </summary>
            <returns>A list of identifiers corresponding to the path, or <c>null</c> if the graph has cycles.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.AssignConnectedComponent(System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Iteratively assigns a component listIndex to the connected nodes of the given node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Initially the Indices collection needs to
            be initialized with -1 to set the nodes which haven't been
            visited.</description>
            </item>
            <item>
            <description>The visiting process is really a DFT of the connected nodes
            starting from a given node and keeping track of the visited item via the
            assigned component map.</description>
            </item>
            </list>
            </remarks>
            <param name="componentMap">
            The indices is the list of component indices mapped to the node indices.
            </param>
            <param name="listIndex">
            The node id being assigned currently.
            </param>
            <param name="componentIndex">
            Index of the current component.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Graph`2.TopologicalSort(System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Int32@)">
            <summary>
            Iterative function helping with the topological sort, see the public overload of TopologicalSort.
            </summary>
            <param name="nodeId">The current node id.</param>
            <param name="result">The result of the sorting (up to this point).</param>
            <param name="handledSequence">The handled sequence.</param>
            <param name="visitSequence">The visit sequence.</param>
            <param name="handledCounter">The handled counter.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.IsConnected">
            <summary>
            Gets whether this graph is connected.
            See also this article;  http://en.wikipedia.org/wiki/Connected_graph. 
            </summary>
            <remarks>
            A graph is connected if every two vertices are connected by a path. A connected
            graph has only one component.
            </remarks>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.IsAcyclic">
            <summary>
            Gets whether the graph is acyclic.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If there are no cycles in a graph it's acyclic. A cycle means a
            closed path or loop.</description></item>
            <item>
            <description>See also the article;
            http://en.wikipedia.org/wiki/Directed_acyclic_graph
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.IsHamiltonian">
            <summary>
            Gets whether the graph is hamiltonian.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>An Hamitonian cycle is a cycle which contains all nodes of the
            graph. If there is at least one such cycle the graph is called
            Hamiltonian.</description></item>
            <item>
            <description>See also the article;http://en.wikipedia.org/wiki/Hamiltonian_graph
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.Links">
            <summary>
            Gets or sets the links of this graph.
            </summary>
            <value>
            The links collection.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.IsDirected">
            <summary>
            Gets whether this graph is directed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Graph`2.Nodes">
            <summary>
            Gets or sets the nodes of this graph.
            </summary>
            <value>
            The nodes collection.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.GraphExtensions">
            <summary>
            The static graph-analysis related extensions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.GraphExtensions.Rand">
            <summary>
            The rand.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.BreadthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},Telerik.Windows.Maths.IVisitor{``0},``0)">
            <summary>
            Performs a breadth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="g">
            The graph to traverse.
            </param>
            <param name="visitor">
            The visitor traversing the graph.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Breadth-first_search.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.TreeFlow``2(Telerik.Windows.Maths.Graph{``0,``1},``0)">
            <summary>
            Enforces a correct edge direction on the given tree-graph so that children of a node are the sink of the edge connecting the parent to the child. If the given graph is not a a tree an exception
            will be thrown.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="root">The root of the flow. If none specified an arbitrary node will be taken.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.BreadthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},System.Action{``0},``0)">
            <summary>
            Performs a breadth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="g">
            The graph to traverse.
            </param>
            <param name="action">
            The action acting a the visited node.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Breadth-first_search.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Clone(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns a shallow clone from the given collection.
            </summary>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Maths.Edge{``0,``1}})">
            <summary>
            Returns a shallow clone from the given collection.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateArray(System.Int32,System.Int32)">
            <summary>
            Returns an array of the specified size.
            </summary>
            <param name="size">
            The size.
            </param>
            <param name="value">
            The Graph value of the elements in the array.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an array of the specified size.
            </summary>
            <param name="dim1">
            The first dimension.
            </param>
            <param name="dim2">
            The second dimension.
            </param>
            <param name="value">
            The Graph value of the elements.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateBiDictionary``2(Telerik.Windows.Maths.Graph{``0,``1},System.Int32)">
            <summary>
            Creates a bidictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateComponents(System.Int32)">
            <summary>
            Creates a random graph with a specified amounts of components.
            </summary>
            <param name="numberOfComponent">
            The number of component.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateDictionary``2(Telerik.Windows.Maths.Graph{``0,``1},System.Int32)">
            <summary>
            Creates a dictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateRandomConnectedGraph(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a random connected graph.
            </summary>
            <param name="nodesCount">The nodes count.</param>
            <param name="maxIncidence">The max incidence.</param>
            <param name="tree">If set to <c>true</c> the random graph will be effectively a tree.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateBalancedTree(System.Int32,System.Int32)">
            <summary>
            Creates a balanced tree.
            </summary>
            <param name="levels">The levels.</param>
            <param name="siblingsCount">The siblings count.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateBalancedForest(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a forest of balanced trees.
            </summary>
            <param name="levels">The levels.</param>
            <param name="siblingsCount">The siblings count.</param>
            <param name="treeCount">The tree count.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.CreateRandomGraph(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a random graph.
            </summary>
            <param name="nodesCount">The count.</param>
            <param name="maxIncidence">The maximum incidence of each node.</param>
            <param name="tree">If set to <c>true</c> the generated graph will be a tree.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},Telerik.Windows.Maths.IVisitor{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="g">
            The graph to traverse.
            </param>
            <param name="visitor">
            The visitor.
            </param>
            <param name="startNode">
            The start node.
            </param>
            <remarks>
            See http://en.wikipedia.org/wiki/Depth-first_search.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},Telerik.Windows.Maths.IParentVisitor{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="g">The g.</param>
            <param name="visitor">The visitor.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},Telerik.Windows.Maths.IDepthVisitor{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="g">The graph.</param>
            <param name="visitor">The visitor.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},System.Action{``0},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="g">
            The g.
            </param>
            <param name="action">
            The action.
            </param>
            <param name="startNode">
            The start node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},System.Action{``0,System.Int32},``0)">
            <summary>
            Performs a depth-first traversal of the graph starting at the given node.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="g">The g.</param>
            <param name="action">The action.</param>
            <param name="startNode">The start node.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.FindCycles``2(Telerik.Windows.Maths.Graph{``0,``1},System.Boolean)">
            <summary>
            Finds cycles in a graph using Tarjan's strongly connected components algorithm.
            See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm .
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <param name="excludeSingleItems">
            If set to <c>true</c> nodes with no edges are excluded.
            </param>
            <returns>
            A list of of vertice arrays (paths) that form cycles in the graph.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.HasIdenticalStructureWith(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}},Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}})">
            <summary>
            Compares the two graph and assert they are identical if
            <list type="bullet">
            <item>
            <description>They have the same amount of nodes and links.</description>
            </item>
            <item>
            <description>The set of node identifiers are the same.</description>
            </item>
            <item>
            <description>The links defined by couples of identifiers are the
            same.</description>
            </item>
            </list>
            .
            </summary>
            <param name="g">
            A graph structure.
            </param>
            <param name="h">
            Another graph structure.
            </param>
            <returns>
            The has identical structure with.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.KruskalsSpanningTree``2(Telerik.Windows.Maths.Graph{``0,``1},System.Boolean)">
            <summary>
            Kruskalses the algorithm.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>On whether you should use Kruskal or Prim's see
            http://stackoverflow.com/questions/1195872/kruskal-vs-prim.</description>
            </item>
            </list>
            .
            </remarks>
            <param name="convertToTreeFlow">
            If set to <c>true</c> and the resulting spanning tree will be converted to a flow, see <see cref="M:Telerik.Windows.Maths.GraphExtensions.TreeFlow``2(Telerik.Windows.Maths.Graph{``0,``1},``0)"/> for more on this.
            </param>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="graph">
            The graph.
            </param>
            <seealso cref="M:Telerik.Windows.Maths.GraphExtensions.PrimsSpanningTree``2(Telerik.Windows.Maths.Graph{``0,``1},``0,System.Boolean)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Merge(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}},Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}})">
            <summary>
            Merges the given graph into the current graph.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="otherGraph">
            The graph to merge into the current one.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Offset(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the given rectangle.
            </summary>
            <param name="rect">
            The rect.
            </param>
            <param name="x">
            The horizontal offset.
            </param>
            <param name="y">
            The vertical offset.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the specified list representing the incidence structure of a graph.
            </summary>
            <param name="list">
            The list of link couples.
            </param>
            <returns>
            The graph corresponding to the incidence structure given.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Position(System.Windows.Rect)">
            <summary>
            Returns the position of the given rectangle.
            </summary>
            <param name="r">
            The rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.PrimsSpanningTree``2(Telerik.Windows.Maths.Graph{``0,``1},``0,System.Boolean)">
            <summary>
            Prim's algorithm  finds a minimum-cost spanning tree of an edge-weighted, connected, undirected graph.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <param name="g">
            The graph structure.
            </param>
            <param name="fromNode">
            The node to start from.
            </param>
            <param name="reverseWrongEdges">
            If set to <c>true</c> and the graph is not directed then the edges which do not point in the correct tree flow direction 
            will be reversed.
            </param>
            <returns>
            </returns>
            <remarks>
            See http://en.wikipedia.org/wiki/Prim%27s_algorithm .
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Split``2(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}})">
            <summary>
            Splits the given, not necessarily connected, graph into its connected components.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="graph">
            The graph to be split.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.TakeRandomNode(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}},Telerik.Windows.Maths.Node{System.Object,System.Object},System.Int32)">
            <summary>
            Takes a random node with incidence less than specified.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="node">
            The node which should not be returned; i.e. the random node should be in the complement of the given node.
            </param>
            <param name="incidenceLessThan">
            The incidence less than.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.TakeTwoRandomNodes(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}})">
            <summary>
            Takes two random nodes from the given graph.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.TarjanStronglyConnectedComponents``2(Telerik.Windows.Maths.Graph{``0,``1},System.Boolean)">
            <summary>
            Returns the strongly connected components of the graph.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="excludeSingleItems">if set to <c>true</c> [exclude single items].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.TarjansStronglyConnectedComponentsAlgorithm``2(System.Boolean,``0,System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.ICollection{``0[]},System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Executes Tarjan's algorithm on the graph.
            </summary>
            <typeparam name="TNode">
            The node data type.
            </typeparam>
            <typeparam name="TLink">
            The link data type.
            </typeparam>
            <remarks>
            See http://en.wikipedia.org/wiki/Pseudoforest .
            </remarks>
            <param name="excludeSinlgeItems">
            If set to <c>true</c> sinlge items (singletons) will not be taken into account.
            </param>
            <param name="node">
            The node to start with.
            </param>
            <param name="indices">
            The current indices.
            </param>
            <param name="lowlinks">
            The current lowlinks.
            </param>
            <param name="connected">
            The connected components.
            </param>
            <param name="stack">
            The stack.
            </param>
            <param name="index">
            The current index.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.UnionEmptyRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            If the first supplied rectangle has width or height zero the second rectangle will be returned. Otherwise the
            standard union of two rectangles will be used.
            </summary>
            <param name="r1">
            A rectangle.
            </param>
            <param name="r2">
            Another rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.UnionRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns the smallest possible rectangle containing
            both of the specified rectangles.
            </summary>
            <param name="a">
            The first rectangle.
            </param>
            <param name="b">
            The second rectangle.
            </param>
            <returns>
            The union of the rectangles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Maths.Node{``0,``1}})">
            <summary>
            Returns a shallow clone from the given collection.
            </summary>
            <typeparam name="TNodeData">
            The node data type.
            </typeparam>
            <typeparam name="TLinkData">
            The link data type.
            </typeparam>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.DepthFirstTraversal``2(Telerik.Windows.Maths.Graph{``0,``1},Telerik.Windows.Maths.IVisitor{``0},``0,System.Collections.Generic.Dictionary{``0,System.Boolean},System.Int32)">
            <summary>
            A recursively called depth traversal helper method.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="g">The graph to traverse.</param>
            <param name="visitor">The visitor.</param>
            <param name="startNode">The start node.</param>
            <param name="visited">The visited dictionary.</param>
            <param name="height">The height.</param>
            <remarks>
            See http://en.wikipedia.org/wiki/Depth-first_search .
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.FetchNode(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}},System.Int32)">
            <summary>
            The fetch node.
            </summary>
            <param name="graph">
            The graph.
            </param>
            <param name="incidence">
            The incidence.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphExtensions.SplitGraph(Telerik.Windows.Maths.Graph{Telerik.Windows.Maths.Node{System.Object,System.Object},Telerik.Windows.Maths.Edge{System.Object,System.Object}})">
            <summary>
            Separates the various graph components from the given graph.
            </summary>
            <param name="graph">
            The Graph which should be separated.
            </param>
        </member>
        <member name="T:Telerik.Windows.Maths.IDepthVisitor`1">
            <summary>
            Describes a DFT visitor to a data structure.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
            <seealso cref="!:GraphExtensions.DepthFirstTraversal&lt;TNode,TLink&gt;(Graph&lt;TNode,TLink&gt;,IVisitor&lt;T&gt;,TNode)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.IDepthVisitor`1.Visit(`0,System.Int32)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
            <param name="height">The height in the DFT.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.IDepthVisitor`1.HasCompleted">
            <summary>
            Gets wether this visitor has finished.
            </summary>
            <remarks>Assigning this value is important to break the traversals when searching.</remarks>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Windows.Maths.IParentVisitor`1.Visit(`0,`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The object to visit.</param>
            <param name="parent">The parent of the visited node.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.IParentVisitor`1.HasCompleted">
            <summary>
            Gets wether this visitor has finished.
            </summary>
            <remarks>Assigning this value is important to break the traversals when searching.</remarks>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.DepthActionVisitor`1">
            <summary>
            A visitor which encloses a standard action.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.DepthActionVisitor`1.#ctor(System.Action{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DepthActionVisitor`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.DepthActionVisitor`1.Visit(`0,System.Int32)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.DepthActionVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.ParentActionVisitor`1">
            <summary>
            A visitor which encloses a standard action.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ParentActionVisitor`1.#ctor(System.Action{`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DepthActionVisitor`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ParentActionVisitor`1.Visit(`0,`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="parent">The parent of the visited node (null if the root).</param>
        </member>
        <member name="P:Telerik.Windows.Maths.ParentActionVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.GraphPath`2">
            <summary>
            A path consists of a series of adjacent links.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.GraphPath`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.#ctor(Telerik.Windows.Maths.GraphPath{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.GraphPath`2"/> class.
            </summary>
            <param name="path">The path from which a clone will be taken as a starting point for this path.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.Add(`1,`0)">
            <summary>
            Adds a links and a node to this path.
            </summary>
            <param name="edge">
            The layout link.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.AddLink(`1)">
            <summary>
            Adds a link to this path.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.AddNode(`0)">
            <summary>
            Adds a node to this path.
            </summary>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.GraphPath`2.Reverse">
            <summary>
            Reverses the nodes sequence.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GraphPath`2.Nodes">
            <summary>
            Gets or sets the nodes of this path.
            </summary>
            <value>
            The nodes this path is made of.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.GraphPath`2.PathLength">
            <summary>
            Gets length of this path (i.e. the amount of links).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GraphPath`2.Elements">
            <summary>
            Gets or sets the collection of nodes and links this path is made of.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GraphPath`2.Links">
            <summary>
            Gets or sets the links of this path.
            </summary>
            <value>
            The links this path is made of.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.INode`2">
            <summary>
            Graph analysis node description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Maths.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Maths.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.Clone">
            <summary>
            Returns a shallow copy of this node.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.RemoveLink(`1)">
            <summary>
            Removes a link from this node.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.AddIncomingEdge(`1)">
            <summary>
            Adds an incoming link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.AddOutgoingEdge(`1)">
            <summary>
            Adds an outgoing link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.RemoveIncomingEdge(`1)">
            <summary>
            Removes an incoming edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.INode`2.RemoveOutgoingEdge(`1)">
            <summary>
            Removes the given outgoing edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.AllLinks">
            <summary>
            Gets all links bounds to this node.
            </summary>
            <value>
            All links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle.
            </summary>
            <remarks>
            This defines the location as well as the size of the shape as a result of a layout process.
            </remarks>
            <value>
            The bounding rectangle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Id">
            <summary>
            Gets or sets the (supposed unique) identifier.
            </summary>
            <value>
            The identifier of this node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Degree">
            <summary>
            Returns the total number of links attached.
            </summary>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.AllLinks"/>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Incoming">
            <summary>
            Gets the incoming links, i.e. the links towards this node.
            </summary>
            <value>
            The incoming links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.IsRoot">
            <summary>
            Gets or sets whether this node is the root of a tree.
            </summary>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Outgoing">
            <summary>
            Gets the outgoing links, i.e. the links leaving this node.
            </summary>
            <value>
            The outgoing.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.IsDirected">
            <summary>
            Gets or sets a value indicating whether this node is part of directed graph.
            </summary>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Children">
            <summary>
            Gets the children nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A child is defined as the opposite node from an edge starting at this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Maths.INode`2.Children"/> and the <see cref="P:Telerik.Windows.Maths.INode`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <returns>The children collection.</returns>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Parents"/>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Neighbors"/>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Parents">
            <summary>
            Gets the parent nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A parent is defined as the opposite node from an edge ending at
            this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Maths.INode`2.Children"/> and the <see cref="P:Telerik.Windows.Maths.INode`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <value>
            The parent collection.
            </value>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Neighbors">Neighbors</seealso>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Children">Children</seealso>
        </member>
        <member name="P:Telerik.Windows.Maths.INode`2.Neighbors">
            <summary>
            Gets the nodes adjacent to this node, i.e. both the <see cref="P:Telerik.Windows.Maths.INode`2.Parents"/> and <see cref="P:Telerik.Windows.Maths.INode`2.Children"/> nodes.
            </summary>
            <returns>
            All the neighbors nodes of this node.
            </returns>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Parents">Parents</seealso>
            <seealso cref="P:Telerik.Windows.Maths.INode`2.Children">Children</seealso>
        </member>
        <member name="T:Telerik.Windows.Maths.Node`2">
            <summary>
            Default implementation of the <see cref="T:Telerik.Windows.Maths.Node`2"/> interface.
            </summary>
            <typeparam name="TNodeData">The type of the payload.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
            <seealso cref="T:Telerik.Windows.Maths.Edge`2"/>
        </member>
        <member name="F:Telerik.Windows.Maths.Node`2.incoming">
            <summary>
            The <see cref="P:Telerik.Windows.Maths.Node`2.Incoming"/> field.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Node`2.outgoing">
            <summary>
            The <see cref="P:Telerik.Windows.Maths.Node`2.Outgoing"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Node`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Node`2"/> class.
            </summary>
            <param name="shape">
            The shape this node is based on.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Node`2"/> class.
            </summary>
            <param name="shape">The shape.</param>
            <param name="isDirected">If set to <c>true</c> [is directed].</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Node`2"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isDirected">If set to <c>true</c> the links are considered as directed and <see cref="P:Telerik.Windows.Maths.Node`2.AllLinks"/> is the same as the <see cref="P:Telerik.Windows.Maths.Node`2.Outgoing"/> or <see cref="P:Telerik.Windows.Maths.Node`2.Incoming"/> collections.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.Clone">
            <summary>
            Returns a (shallow) copy of this node.
            </summary>
            <returns>
            Returns a copy of this node, including the references of incoming and outgoing edges.
            It does not however clone beyond these collections.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.RemoveLink(Telerik.Windows.Maths.Edge{`0,`1})">
            <summary>
            Removes a link.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.AddIncomingEdge(Telerik.Windows.Maths.Edge{`0,`1})">
            <summary>
            Adds an incoming link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.AddOutgoingEdge(Telerik.Windows.Maths.Edge{`0,`1})">
            <summary>
            Adds an outgoing link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.RemoveIncomingEdge(Telerik.Windows.Maths.Edge{`0,`1})">
            <summary>
            Removes an incoming edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Node`2.RemoveOutgoingEdge(Telerik.Windows.Maths.Edge{`0,`1})">
            <summary>
            Removes the given outgoing edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Data">
            <summary>
            Gets or sets the data or payload carried by this node.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.AssociatedShape">
            <summary>
            Get the shape associated with this layout shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Center">
            <summary>
            Gets or sets the geometric center of this ControlShape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Degree">
            <summary>
            Returns the total number of links attached.
            </summary>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.AllLinks"/>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.IsRoot">
            <summary>
            Gets or sets whether this node is a tree-root.
            </summary>
            <remarks>This property only makes sense in a tree-context. Use a spanning tree algorithm to extract a tree from a generic graph if necessary.</remarks>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.AllLinks">
            <summary>
            Gets all the links of this node.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Incoming">
            <summary>
            Get the node's incoming links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Maths.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Maths.Graph`2.AddLink(`0,`0)"/> method in
            order to update the related properties (<see cref="P:Telerik.Windows.Maths.Node`2.AllLinks"/>,
            <see cref="P:Telerik.Windows.Maths.Node`2.Outgoing"/>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Maths.Graph`2.AddLink(`0,`0)"/>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Outgoing"/>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Outgoing">
            <summary>
            Get the node's outgoing links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Maths.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Maths.Graph`2.AddLink(`0,`0)">Graph{TNode,TLink}.AddLink(TNode,TNode)</see>
            method in order to update the related properties (<see cref="P:Telerik.Windows.Maths.Node`2.AllLinks">AllLinks</see>, <see cref="P:Telerik.Windows.Maths.Node`2.Outgoing">Outgoing</see>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Maths.Graph`2.AddLink(`0,`0)">AddLink(TNode,TNode)</seealso>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Incoming">Incoming</seealso>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.IsDirected">
            <summary>
            Gets whether this node's links are directed.
            </summary>
            <seealso cref="P:Telerik.Windows.Maths.Graph`2.IsDirected"/>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Children">
            <summary>
            Gets the children nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A child is defined as the opposite node from an edge starting at this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Maths.Node`2.Children"/> and the <see cref="P:Telerik.Windows.Maths.Node`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <returns>The children collection.</returns>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Parents"/>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Neighbors"/>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Parents">
            <summary>
            Gets the parent nodes attached to this node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>A parent is defined as the opposite node from an edge ending at
            this node.</description></item>
            <item>
            <description>If the graph is not directed this will return the same collection
            as the <see cref="P:Telerik.Windows.Maths.Node`2.Children"/> and the <see cref="P:Telerik.Windows.Maths.Node`2.Neighbors"/> property, i.e. all the nodes attached to the
            this node.</description></item></list>
            </remarks>
            <value>
            The parent collection.
            </value>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Neighbors">Neighbors</seealso>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Children">Children</seealso>
        </member>
        <member name="P:Telerik.Windows.Maths.Node`2.Neighbors">
            <summary>
            Gets the nodes adjacent to this node, i.e. both the <see cref="P:Telerik.Windows.Maths.Node`2.Parents"/> and <see cref="P:Telerik.Windows.Maths.Node`2.Children"/> nodes.
            </summary>
            <returns>
            All the neighbors nodes of this node.
            </returns>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Parents">Parents</seealso>
            <seealso cref="P:Telerik.Windows.Maths.Node`2.Children">Children</seealso>
        </member>
        <member name="T:Telerik.Windows.Maths.Twig`2">
            <summary>
            Data bucket similar to a <see cref="!:TreeNode&lt;TNode&gt;"/> but based on a link rather than a parent property.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Twig`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Twig`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Twig`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Twig`2"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="link">The link.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Twig`2.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Twig`2.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.IPrePostVisitor`1">
            <summary>
            
            </summary>
            <typeparam name="T">The data type being visited.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.IVisitor`1">
            <summary>
            Describes a visitor to a data structure.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.IVisitor`1.Visit(`0)">
            <summary>
            Visits the specified item.
            </summary>
            <param name="item">The item to visit.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.IVisitor`1.HasCompleted">
            <summary>
            Gets wether this visitor has finished.
            </summary>
            <remarks>Assigning this value is important to break the traversals when searching.</remarks>
            <value><c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Windows.Maths.IPrePostVisitor`1.PreVisit(`0)">
            <summary>
            Pre-visit action.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.IPrePostVisitor`1.PostVisit(`0)">
            <summary>
            Post-visit action.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`8">
            <summary>
            A mutable tuple of dimension eight.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The data type of the sixth item.</typeparam>
            <typeparam name="T7">The data type of the seventh item.</typeparam>
            <typeparam name="T8">The data type of the eighth item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`7">
            <summary>
            A mutable tuple of dimension seven.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The type of the sixth item.</typeparam>
            <typeparam name="T7">The type of the seventh item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`6">
            <summary>
            A mutable tuple of dimension six.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
            <typeparam name="T6">The data type of the sixth item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`5">
            <summary>
            A mutable tuple of dimension four.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
            <typeparam name="T5">The data type of the fifth item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`4">
            <summary>
            A mutable tuple of dimension one.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
            <typeparam name="T4">The data type of the fourth item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`3">
            <summary>
            A mutable tuple of dimension three.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
            <typeparam name="T3">The data type of the third item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`2">
            <summary>
            A mutable tuple of dimension two.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
            <typeparam name="T2">The data type of the second item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple`1">
            <summary>
            A mutable tuple of dimension one.
            </summary>
            <typeparam name="T1">The data type of the first item.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Maths.Muple">
            <summary>
            An empty, mutable tuple.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple.Create``1(``0)">
            <summary>
            Creates a 1-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="t1">The t1.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple.Create``2(``0,``1)">
            <summary>
            Creates a 2-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple.Create``3(``0,``1,``2)">
            <summary>
            Creates a 3-muple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`1"/> class.
            </summary>
            <param name="item1">The item1.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`1.Item1">
            <summary>
            Gets or sets the first item.
            </summary>
            <value>
            The item1.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`2.Item2">
            <summary>
            Gets or sets the second item.
            </summary>
            <value>
            The item2.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`3"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`3.Item3">
            <summary>
            Gets or sets the third item.
            </summary>
            <value>
            The item3.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`4"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`4.Item4">
            <summary>
            Gets or sets the fourth item.
            </summary>
            <value>
            The item4.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`5"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`5.Item5">
            <summary>
            Gets or sets the fifth item.
            </summary>
            <value>
            The item5.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`6"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`6.Item6">
            <summary>
            Gets or sets the sixth item.
            </summary>
            <value>
            The item6.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`7"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
            <param name="item7">The item7.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`7.Item7">
            <summary>
            Gets or sets the seventh item.
            </summary>
            <value>
            The item7.
            </value>
        </member>
        <member name="M:Telerik.Windows.Maths.Muple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Muple`8"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <param name="item6">The item6.</param>
            <param name="item7">The item7.</param>
            <param name="item8">The item8.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Muple`8.Item8">
            <summary>
            Gets or sets the eighth item.
            </summary>
            <value>
            The item8.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.RedBlackTree`1">
            <summary>
            Red-Black tree data structure.
            </summary>
            <typeparam name="T">The dara type contained in the tree.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`1"/> class.
            </summary>
            <remarks>The default comparer for the data type will be used.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`1"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.AddItem(`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.RemoveItem(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            	<c>true</c> if the element is successfully removed; otherwise, <c>false</c>.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.DoubleRotation(Telerik.Windows.Maths.RedBlackTreeNode{`0},System.Boolean)">
            <summary>
            Perform a double rotation on the node provided..
            </summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.IsBlack(Telerik.Windows.Maths.RedBlackTreeNode{`0})">
            <summary>
            Determines whether the specified node is black.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is black; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.IsRed(Telerik.Windows.Maths.RedBlackTreeNode{`0})">
            <summary>
            Determines whether the specified node is red.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is red; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.SingleRotation(Telerik.Windows.Maths.RedBlackTreeNode{`0},System.Boolean)">
            <summary>
            Perform a single rotation on the node provided..
            </summary>
            <param name="node">The node on which to focus the rotation.</param>
            <param name="direction">The direction of the rotation.  If direction is equal to true, a right rotation is performed.  Other wise, a left rotation.</param>
            <returns>The new root of the cluster.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`1.InsertNode(Telerik.Windows.Maths.RedBlackTreeNode{`0},`0)">
            <summary>
            A recursive implementation of insertion of a node into the tree.
            </summary>
            <param name="node">The start node.</param>
            <param name="item">The item.</param>
            <returns>The node created in the insertion.</returns>
        </member>
        <member name="T:Telerik.Windows.Maths.NodeColor">
            <summary>
            <see cref="T:Telerik.Windows.Maths.RedBlackTree`2"/> node colors.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.NodeColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.NodeColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.OrderType">
            <summary>
            Enumerates the two ways a <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> orders its elements.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.OrderType.Ascending">
            <summary>
            Specifies that the element with the minimum priority will pop first in the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.OrderType.Descending">
            <summary>
            Specifies that the element with the maximum priority will pop first in the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/>.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Heap`1">
            <summary>
            An implementation of the Heap data structure.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Heap_%28data_structure%29 .</remarks>
            <typeparam name="TData">The type of item stored in the <see cref="T:Telerik.Windows.Maths.Heap`1"/>.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType,System.Int32,System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.#ctor(Telerik.Windows.Maths.OrderType,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Heap`1"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.Add(`0)">
            <summary>
            Adds the given item to the heap.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.Clear">
            <summary>
            Clears this heap of all data.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.Contains(`0)">
            <summary>
            Returns whether the given item is in the heap.
            </summary>
            <param name="item">The item to test.</param>
            <returns>
              <c>true</c> if contained in this heap; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the heap data to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="position">Index of the array from which the copying starts.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.RemoveRoot">
            <summary>
            Removes the root from the heap.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <summary>
            Removes the specified item from the heap.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.AddItem(`0)">
            <summary>
            Adds the given item to the heap.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.Heap`1.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Heap`1.RemoveRootItem">
            <summary>
            Removes the root item and reheapifies the tree.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Heap`1.Count">
            <summary>
            Gets the number of items in this heap structure.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Heap`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Heap`1.IsReadOnly">
            <summary>
            Returns <c>false</c>; the heap is never read-only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.Heap`1.Root">
            <summary>
            Gets the root of the heap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Heap`1.Type">
            <summary>
            Gets the type of heap.
            </summary>
            <value>The type of heap.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.PriorityQueue`2">
            <summary>
            Priority queue implementation based on a <see cref="T:Telerik.Windows.Maths.RedBlackTreeList`2"/>.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Priority_queue .</remarks>
            <typeparam name="TValue">The data type of the value.</typeparam>
            <typeparam name="TPriority">The data type of the priority indicator.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Maths.PriorityQueue`2.queueType">
            <summary>
            The current priority type for the queue.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.PriorityQueue`2.tree">
            <summary>
            The RedBlack tree list this queue is based on.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.#ctor(Telerik.Windows.Maths.OrderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.#ctor(Telerik.Windows.Maths.OrderType,System.Collections.Generic.IComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.#ctor(Telerik.Windows.Maths.OrderType,System.Comparison{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> class.
            </summary>
            <param name="queueType">Type of the queue.</param>
            <param name="comparison">The comparison.</param>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Add(`0)">
            <summary>
            Adds the specified item to the queue.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Adds the specified items to the priority queue with the specified priority.
            </summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is a null reference (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Clear">
            <summary>
            Clears this queue of all its items..
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given item is present in the queue.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the queue contains the given item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the content of the queue to the given array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Pop">
            <summary>
            Dequeues the item at the front of the queue.
            </summary>
            <returns>The item at the front of the queue.</returns>
            <seealso cref="M:Telerik.Windows.Maths.PriorityQueue`2.Pop"/>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Dequeue(`1@)">
            <summary>
            Dequeues the item from the head of the queue.
            </summary>
            <param name="priority">The priority of the item to dequeue.</param>
            <returns>The item at the head of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> is empty.</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.GetKeyEnumerator">
            <summary>
            Returns an enumerator that iterates through the keys in the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the keys in the collection.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.GetPriorityGroup(`1)">
            <summary>
            Removes the items with the specified priority.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The items with the specified priority.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Peek">
            <summary>
            Peeks at the item in the front of the queue, without removing it.
            </summary>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Peek(`1@)">
            <summary>
            Peeks at the item in the front of the queue, without removing it.
            </summary>
            <param name="priority">The priority of the item.</param>
            <returns>The item at the front of the queue.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Push(`0)">
            <summary>
            Pushes the specified item in the queue.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Push(`0,`1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="priority">The priority of the item.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Remove(`0)">
            <summary>
            Removes the specified item from this queue.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.Remove(`0,`1@)">
            <summary>
            Removes the first occurrence of the specified item from the property queue.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="priority">The priority associated with the item.</param>
            <returns><c>true</c> if the item exists in the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.RemovePriorityGroup(`1)">
            <summary>
            Removes the items with the specified priority.
            </summary>
            <param name="priority">The priority.</param>
            <returns><c>true</c> if the priority exists in the <see cref="T:Telerik.Windows.Maths.PriorityQueue`2"/> and has been removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.AddItem(`0,`1)">
            <summary>
            Adds the item to the queue.
            </summary>
            <param name="item">The item to add.</param>
            <param name="priority">The priority of the item.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.PriorityQueue`2.Push(`0,`1)"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.AddPriorityGroupItem(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Adds the specified items to the priority queue with the specified priority.
            </summary>
            <param name="items">The items.</param>
            <param name="priority">The priority.</param>
            <remarks>
            	<b>Notes to Inheritors: </b>
            Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.PriorityQueue`2.AddPriorityGroup(System.Collections.Generic.IEnumerable{`0},`1)"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.CheckTreeNotEmpty">
            <summary>
            Checks if the list is not empty, and if it is, throw an exception.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.ClearItems">
            <summary>
            Clears all the objects in this instance.
            </summary>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.PriorityQueue`2.Clear"/> method.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.DequeueItem(`1@)">
            <summary>
            Dequeues the item at the front of the queue.
            </summary>
            <returns>The item at the front of the queue.</returns>
            <remarks>
            <b>Notes to Inheritors: </b>
             Derived classes can override this method to change the behavior of the <see cref="M:Telerik.Windows.Maths.PriorityQueue`2.Dequeue(`1@)"/> or <see cref="M:Telerik.Windows.Maths.PriorityQueue`2.Dequeue(`1@)"/> methods.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.GetNextItem">
            <summary>
            Gets the next item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.RemoveItem(`0,`1@)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="priority">The priority of the item that was removed.</param>
            <returns>An indication of whether the item was found, and removed.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PriorityQueue`2.RemoveItems(`1)">
            <summary>
            Removes the items from the collection with the specified priority.
            </summary>
            <param name="priority">The priority to search for.</param>
            <returns>An indication of whether items were found having the specified priority.</returns>
        </member>
        <member name="P:Telerik.Windows.Maths.PriorityQueue`2.Count">
            <summary>
            Gets the number of elements still in the queue.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PriorityQueue`2.DefaultPriority">
            <summary>
            Gets or sets the default priority when an item is added.
            </summary>
            <remarks>The default value is zero if not set.</remarks>
            <value>The default priority.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.PriorityQueue`2.IsReadOnly">
            <summary>
            Gets <c>false</c> since this queue is never read-only.
            </summary>
            <value>
            	<c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.RedBlackTree`2">
            <summary>
            A redâ€“black tree is a type of self-balancing binary search tree, a data structure used in computer science, typically to implement associative arrays.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`2"/> class.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether this tree contains the given item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the item is in this tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTree`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTree`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTree`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTree`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The key of the item to set or get.</value>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTreeList`2"/> class.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.GetKeyEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.GetValueEnumerator">
            <summary>
            Gets the value enumerator.
            </summary>
            <returns>An enumerator to enumerate through the values contained in this instance.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.Remove(`1,`0@)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key under which the item was found.</param>
            <returns>A value indicating whether the item was found or not.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeList`2.TraverseItems(Telerik.Windows.Maths.RedBlackTreeList{`0,`1}.NodeAction)">
            <summary>
            Traverses the items.
            </summary>
            <param name="shouldStop">A predicate that performs an action on the list, and indicates whether the enumeration of items should stop or not.</param>
            <returns>An indication of whether the enumeration was stopped prematurely.</returns>
        </member>
        <member name="T:Telerik.Windows.Maths.RedBlackTreeNode`1">
            <summary>
            An item/node of the <see cref="T:Telerik.Windows.Maths.RedBlackTree`2"/> can obviously only have at most two children, hence the inheritance from the <see cref="T:Telerik.Windows.Maths.BinaryTree`1"/>.
            </summary>
            <typeparam name="T">The data type in the node.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.RedBlackTreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RedBlackTreeNode`1"/> class.
            </summary>
            <param name="data">The data contained in this node.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTreeNode`1.Color">
            <summary>
            Gets or sets the color of the current node.
            </summary>
            <value>The color of the node.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTreeNode`1.Left">
            <summary>
            Gets or sets the left subtree.
            </summary>
            <value>The left subtree.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.RedBlackTreeNode`1.Right">
            <summary>
            Gets or sets the right subtree.
            </summary>
            <value>The right subtree.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.ActionVisitor`1">
            <summary>
            A visitor which encloses a standard action.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.ActionVisitor`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ActionVisitor`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ActionVisitor`1.Visit(`0)">
            <summary>
            Visits the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.ActionVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.Visitor`1">
            <summary>
            The default implementation of the <see cref="T:Telerik.Windows.Maths.IVisitor`1"/> interface.
            </summary>
            <typeparam name="T">The type of objects to be visited.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Visitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Visitor`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Visitor`1.Visit(`0)">
            <summary>
            Visits the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.Visitor`1.HasCompleted">
            <summary>
            Gets or sets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.KeyValueTrailVisitor`2">
            <summary>
            A visitor that tracks (stores) keys from KeyValuePairs in the order they were visited.
            </summary>
            <typeparam name="TKey">The type of key of the KeyValuePair.</typeparam>
            <typeparam name="TValue">The type of value of the KeyValuePair.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValueTrailVisitor`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Windows.Maths.KeyValueTrailVisitor`2.Visit(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Visits the specified keypair.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.KeyValueTrailVisitor`2.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.KeyValueTrailVisitor`2.Values">
            <summary>
            Gets the trail of the values.
            </summary>
            <value>The value list.</value>
        </member>
        <member name="P:Telerik.Windows.Maths.KeyValueTrailVisitor`2.Keys">
            <summary>
            Gets the trail of the keys.
            </summary>
            <value>The keys list.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.MatchingVisitor`1">
            <summary>
            A visitor helping to find a specific element.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.MatchingVisitor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MatchingVisitor`1"/> class.
            </summary>
            <param name="whatMatch">The what to match.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.MatchingVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.MatchingVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this instance has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Maths.PrePostVisitor`1">
            <summary>
            A visitor with a pre and post action.
            </summary>
            <typeparam name="T">The dara type being visited.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.PrePostVisitor`1.#ctor(Telerik.Windows.Maths.IVisitor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.PrePostVisitor`1"/> class.
            </summary>
            <param name="visitorToUse">The visitor to use.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PrePostVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PrePostVisitor`1.PostVisit(`0)">
            <summary>
            Post-visit method.
            </summary>
            <param name="item">The item being visited.</param>        
        </member>
        <member name="M:Telerik.Windows.Maths.PrePostVisitor`1.PreVisit(`0)">
            <summary>
            Pre-visit method.
            </summary>
            <param name="item">The item being visited.</param>         
        </member>
        <member name="P:Telerik.Windows.Maths.PrePostVisitor`1.HasCompleted">
            <summary>
            Determines whether this visitor is done.
            </summary>
            <value></value>
            <returns>
            	<c>true</c> if this visitor is done; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Maths.PrePostVisitor`1.VisitorToUse">
            <summary>
            Gets the visitor to use.
            </summary>
            <value>The visitor to use.</value>
        </member>
        <member name="T:Telerik.Windows.Maths.TrailVisitor`1">
            <summary>
            This visitor keeps a trail of the visited item in the <see cref="P:Telerik.Windows.Maths.TrailVisitor`1.Trail"/>.
            </summary>
            <typeparam name="TData">The data type of the visitor.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.TrailVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.TrailVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.TrailVisitor`1.Visit(`0)">
            <summary>
            Visits the specified object.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Telerik.Windows.Maths.TrailVisitor`1.HasCompleted">
            <summary>
            Gets a value indicating whether this visitor has completed.
            </summary>
            <value>
            	<c>true</c> if this instance has completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.TrailVisitor`1.Trail">
            <summary>
            Gets the tracking list.
            </summary>
            <value>The tracking list.</value>        
        </member>
        <member name="T:Telerik.Windows.Maths.EngineeringFunctions">
            <summary>
            This class contains all the Excel engineering functions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BESSELI(System.Double,System.Double)">
            <summary>
            Returns the modified Bessel function, which is equivalent to the Bessel function evaluated for purely imaginary arguments.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="n">The order of the Bessel function. If n is not an integer, it is truncated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BESSELJ(System.Double,System.Double)">
            <summary>
            Returns the Bessel function.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="n">The order of the Bessel function. If n is not an integer, it is truncated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BESSELK(System.Double,System.Double)">
            <summary>
            Returns the modified Bessel function, which is equivalent to the Bessel functions evaluated for purely imaginary arguments.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="n">The order of the Bessel function. If n is not an integer, it is truncated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BESSELY(System.Double,System.Double)">
            <summary>
            Returns the Bessel function, which is also called the Weber function or the Neumann function.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="n">The order of the Bessel function. If n is not an integer, it is truncated.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BIN2DEC(System.String)">
            <summary>
            Converts a binary number to decimal.
            </summary>
            <param name="number">The binary number you want to convert. Number cannot contain more than 10 characters (10 bits). 
            The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BIN2HEX(System.String,System.Int32)">
            <summary>
            Converts a binary number to hexadecimal.
            </summary>
            <param name="number">The binary number you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places"> The number of characters to use. If places is omitted, BIN2HEX uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BIN2HEX(System.String)">
            <summary>
            Converts a binary number to hexadecimal.
            </summary>
            <param name="number">The binary number you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BIN2OCT(System.String,System.Int32)">
            <summary>
            Converts a binary number to octal.
            </summary>
            <param name="number">The binary number you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, BIN2OCT uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BIN2OCT(System.String)">
            <summary>
            Converts a binary number to octal.
            </summary>
            <param name="number">The binary number you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BITAND(System.Int64,System.Int64)">
            <summary>
            Returns a bitwise 'AND' of two numbers.
            </summary>
            <param name="number1">Must be in decimal form and greater than or equal to 0.</param>
            <param name="number2">Must be in decimal form and greater than or equal to 0.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BITLSHIFT(System.Int64,System.Int32)">
            <summary>
            Returns a number shifted left by the specified number of bits.
            </summary>
            <param name="number">Must be an integer greater than or equal to 0.</param>
            <param name="amount">Must be an integer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BITOR(System.Int64,System.Int64)">
            <summary>
            Returns a bitwise 'OR' of two numbers.
            </summary>
            <param name="number1"> Must be in decimal form and greater than or equal to 0.</param>
            <param name="number2"> Must be in decimal form and greater than or equal to 0.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BITRSHIFT(System.Int64,System.Int32)">
            <summary>
            Returns a number shifted right by the specified number of bits.
            </summary>
            <param name="number">Must be an integer greater than or equal to 0.</param>
            <param name="amount">Must be an integer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.BITXOR(System.Int64,System.Int64)">
            <summary>
            Returns a bitwise 'XOR' of two numbers.
            </summary>
            <param name="number1">Must be greater than or equal to 0.</param>
            <param name="number2">Must be greater than or equal to 0.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.COMPLEX(System.Double,System.Double,System.String)">
            <summary>
            Converts real and imaginary coefficients into a complex number of the form x + yi or x + yj.
            </summary>
            <param name="a">The real coefficient of the complex number.</param>
            <param name="b">The imaginary coefficient of the complex number.</param>
            <param name="complexSymbol"> The suffix for the imaginary component of the complex number. If omitted, suffix is assumed to be "i".</param>
            <returns></returns>
            <exception cref="T:System.Exception">Only 'i' or 'j' is allowed for the imaginary number.</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.CONVERT(System.Double,System.String,System.String)">
            <summary>
            Converts a number from one measurement system to another. For example, CONVERT can translate a table of distances in miles to a table of distances in kilometers.
            </summary>
            <param name="number">The value in from_units to convert.</param>
            <param name="from_unit"> The units for number.</param>
            <param name="to_unit">The units for the result. .</param>
            <seealso cref="T:Telerik.Windows.Maths.MultiplierPrefix"/>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2BIN(System.Double)">
            <summary>
            Converts a decimal number to binary.
            </summary>
            <param name="number"> The decimal integer you want to convert. If number is negative, valid place values are ignored and DEC2BIN returns a 10-character (10-bit) 
            binary number in which the most significant bit is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <exception cref="T:System.Exception">
            If the number should not be less than -512 and not bigger than 511 or if the number of characters to use cannot be less than one or if the number of characters to use cannot be more than ten.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2BIN(System.Double,System.Int32)">
            <summary>
            Converts a decimal number to binary.
            </summary>
            <param name="number"> The decimal integer you want to convert. If number is negative, valid place values are ignored and DEC2BIN returns a 10-character (10-bit) 
            binary number in which the most significant bit is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, DEC2BIN uses the minimum number of characters necessary. 
            Places is useful for padding the return value with leading 0s (zeros).</param>
            <exception cref="T:System.Exception">
            If the number should not be less than -512 and not bigger than 511 or if the number of characters to use cannot be less than one or if the number of characters to use cannot be more than ten.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2HEX(System.Double,System.Int32)">
            <summary>
            Converts a decimal number to hexadecimal.
            </summary>
            <param name="number">The decimal integer you want to convert. If number is negative, places is ignored and DEC2HEX returns a 10-character (40-bit) hexadecimal number in which the most significant bit is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, DEC2BIN uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros)</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2HEX(System.Double)">
            <summary>
            Converts a decimal number to hexadecimal.
            </summary>
            <param name="number">The decimal integer you want to convert. If number is negative, places is ignored and DEC2HEX returns a 10-character (40-bit) hexadecimal number in which the most significant bit is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2OCT(System.Double,System.Int32)">
            <summary>
            Converts a decimal number to hexadecimal.
            </summary>
            <param name="number">The decimal integer you want to convert. If number is negative, places is ignored and DEC2HEX returns a 10-character (40-bit) hexadecimal number in which the most significant bit is the sign bit. 
            The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, DEC2HEX uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DEC2OCT(System.Double)">
            <summary>
            Converts a decimal number to hexadecimal.
            </summary>
            <param name="number">The decimal integer you want to convert. If number is negative, places is ignored and DEC2HEX returns a 10-character (40-bit) hexadecimal number in which the most significant bit is the sign bit. 
            The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, DEC2HEX uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DELTA(System.Double)">
            <summary>
            Tests whether the value is equal to zero. Returns 1 if number = 0, returns 0 otherwise. 
            </summary>
            <param name="number">A number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.DELTA(System.Double,System.Double)">
            <summary>
            Tests whether two values are equal. Returns 1 if number1 = number2; returns 0 otherwise. 
            Use this function to filter a set of values. For example, by summing several DELTA functions you calculate 
            the count of equal pairs. This function is also known as the Kronecker Delta function.
            </summary>
            <param name="number1">A number.</param>
            <param name="number2">A number.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.ERF(System.Double,System.Double)">
            <summary>
            Returns the error function integrated between lower_limit and upper_limit.
            </summary>
            <param name="lower_limit">The lower limit of the integration.</param>
            <param name="upper_limit">The upper bound for integrating ERF. If omitted, ERF integrates between zero and lower_limit.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.ERF(System.Double)">
            <summary>
            Returns the error function integrated between zero and the given upper_limit.
            </summary>
            <remarks>The ERF.Precise function of Excel returns a more accurate value but this difference has to be implemented in consumers of this library. 
            This function will return the most precise value possible and is, hence, the ERF.PRECISE engineering function. To get the ERF function just truncate the returned value.</remarks>
            <param name="upper_limit">The upper_limit.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.GESTEP(System.Double)">
            <summary>
            Returns 1 if number â‰¥ 0; returns 0 (zero) otherwise.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.GESTEP(System.Double,System.Double)">
            <summary>
            Returns 1 if number â‰¥ step; returns 0 (zero) otherwise. This is sometimes called the Heaviside step function, the Kronecker delta being the derivative of this function within the context of distributions.
            </summary>
            <param name="number">A number.</param>
            <param name="step">A step or threshold from which on the result is one.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.HEX2BIN(System.String,System.Int32)">
            <summary>
            Converts a hexadecimal number to binary.
            </summary>
            <param name="number"> The hexadecimal number you want to convert. Number cannot contain more than 10 characters. The most significant bit of number is the sign bit (40th bit from the right). The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, HEX2BIN uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.HEX2BIN(System.String)">
            <summary>
            Converts a hexadecimal number to binary.
            </summary>
            <param name="number"> The hexadecimal number you want to convert. Number cannot contain more than 10 characters. The most significant bit of number is the sign bit (40th bit from the right). The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.HEX2DEC(System.String)">
            <summary>
            Converts a hexadecimal number to decimal.
            </summary>
            <param name="number">The hexadecimal number you want to convert. Number cannot contain more than 10 characters (40 bits). The most significant bit of number is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.HEX2OCT(System.String,System.Int32)">
            <summary>
            Converts a hexadecimal number to octal.
            </summary>
            <param name="number">The hexadecimal number you want to convert. Number cannot contain more than 10 characters. 
            The most significant bit of number is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, HEX2OCT uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.HEX2OCT(System.String)">
            <summary>
            Converts a hexadecimal number to octal.
            </summary>
            <param name="number">The hexadecimal number you want to convert. Number cannot contain more than 10 characters. 
            The most significant bit of number is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMABS(System.String)">
            <summary>
            Returns the absolute value (modulus) of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMAGINARY(System.String)">
            <summary>
            Ieturns the imaginary coefficient of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number for which you want the imaginary coefficient.</param>
            <seealso cref="M:Telerik.Windows.Maths.EngineeringFunctions.COMPLEX(System.Double,System.Double,System.String)"/>
            <seealso cref="T:Telerik.Windows.Maths.ComplexExtensions"/>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMARGUMENT(System.String)">
            <summary>
            Returns the argument of the polar representation of the specified complex number.
            </summary>
            <remarks>The returned angle is in radians.</remarks>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCONJUGATE(System.String)">
            <summary>
            Returns the complex conjugate of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCOS(System.String)">
            <summary>
            Returns the cosine of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCOSH(System.String)">
            <summary>
            Returns the hyperbolic cosine of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCOT(System.String)">
            <summary>
            Returns the cotangent of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCSC(System.String)">
            <summary>
            Returns the hyperbolic secant of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMCSCH(System.String)">
            <summary>
            Returns the hyperbolic cosecant of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMDIV(System.String,System.String)">
            <summary>
            Returns the quotient of two complex numbers.
            </summary>
            <param name="complexNumber1">A complex number.</param>
            <param name="complexNumber2">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMEXP(System.String)">
            <summary>
            Returns the exponential of a complex number.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMLN(System.String)">
            <summary>
            Returns the natural logarithm of a complex number.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMLOG10(System.String)">
            <summary>
            Returns the base-10 logarithm of a complex number.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMLOG2(System.String)">
            <summary>
            Returns the base-10 logarithm of a complex number.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMPOWER(System.String,System.Double)">
            <summary>
            Returns a complex number in x + yi or x + yj text format raised to a power.
            </summary>
            <param name="complexNumber">A complex number you want to raise to a power.</param>
            <param name="power">The power to which you want to raise the complex number.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMPRODUCT(System.String,System.String)">
            <summary>
            Returns the product of two complex numbers
            </summary>
            <param name="complexNumber1">A complex number.</param>
            <param name="complexNumber2">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMREAL(System.String)">
            <summary>
            Returns the real coefficient of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSEC(System.String)">
            <summary>
            Returns the secant of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSECH(System.String)">
            <summary>
            Returns the hyperbolic secant of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSIN(System.String)">
            <summary>
            Returns the sine of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSINH(System.String)">
            <summary>
            Returns the hyperbolic sine of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSQRT(System.String)">
            <summary>
            Returns the square root of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSUB(System.String,System.String)">
            <summary>
            Returns the difference between two complex numbers
            </summary>
            <param name="complexNumber1">A complex number.</param>
            <param name="complexNumber2">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMSUM(System.String,System.String)">
            <summary>
            Returns the sum of two complex numbers
            </summary>
            <param name="complexNumber1">A complex number.</param>
            <param name="complexNumber2">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.IMTAN(System.String)">
            <summary>
            Returns the tangent of a complex number in x+yi or x+yj text format.
            </summary>
            <param name="complexNumber">A complex number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.OCT2BIN(System.String,System.Int32)">
            <summary>
            Converts an octal number to binary.
            </summary>
            <param name="number">The octal number you want to convert. Number may not contain more than 10 characters. The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, OCT2BIN uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.OCT2BIN(System.String)">
            <summary>
            Converts an octal number to binary.
            </summary>
            <param name="number">The octal number you want to convert. Number may not contain more than 10 characters. The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.OCT2DEC(System.String)">
            <summary>
            Converts an octal number to decimal.
            </summary>
            <param name="number">TThe octal number you want to convert. Number may not contain more than 10 octal characters (30 bits). 
            The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.OCT2HEX(System.String,System.Int32)">
            <summary>
            Converts an octal number to hexadecimal.
            </summary>
            <param name="number">The octal number you want to convert. Number may not contain more than 10 octal characters (30 bits). 
            The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
            <param name="places">The number of characters to use. If places is omitted, OCT2HEX uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.EngineeringFunctions.OCT2HEX(System.String)">
            <summary>
            Converts an octal number to hexadecimal.
            </summary>
            <param name="number">The octal number you want to convert. Number may not contain more than 10 octal characters (30 bits). 
            The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.</param>
        </member>
        <member name="T:Telerik.Windows.Maths.MassUnit">
            <summary>
            Enumeration of supported mass units.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Gram">
            <summary>
            Gram "g".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Slug">
            <summary>
            Slug "sg".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Pound">
            <summary>
            Pound mass (avoirdupois) "lbm".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.AtomicMassUnit">
            <summary>
            Atomic mass unit "u".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Ounce">
            <summary>
            Ounce mass (avoirdupois) "ozm".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Grain">
            <summary>
            Grain 'grain".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.ShortWeight">
            <summary>
            U.S. (short) undredweight "cwt" or "shweight".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.ImperialWeight">
            <summary>
            Imperial hundredweight "uk_cwt" or "lcwt" or "hweight".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Stone">
            <summary>
            Stone "stone".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.Ton">
            <summary>
            Ton "ton".
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MassUnit.ImperialTon">
            <summary>
            Imperial ton "uk_ton" or "LTON" or "brton".
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FFT.DiscreteFourierTransform">
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FFT.DiscreteFourierTransform.PlainFourierTransform(System.Numerics.Complex[],System.Int32)">
            <summary>
            Plain discrete Fourier transformation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FFT.DiscreteFourierTransform.PlainForward(System.Numerics.Complex[])">
            <summary>
            Plain forward discrete Fourier transformation.
            </summary>
            <remarks>Forward means that the k-space vector is returned.</remarks>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FFT.DiscreteFourierTransform.PlainInverse(System.Numerics.Complex[])">
            <summary>
            Plain inverse discrete Fourier transformation.
            </summary>
            <remarks>Forward means that the k-space vector is returned.</remarks>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions">
            <summary>
            Common financial, actuarial and investment functions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ACCRINT(System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the accrued interest for a security that pays periodic interest.
            </summary>
            <param name="issue">The security's issue date.</param>
            <param name="firstInterestData">The security's first interest date.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer..</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="par">The security's par value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ACCRINTM(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the accrued interest for a security that pays interest at maturity.
            </summary>
            <param name="issue">The security's issue date.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer..</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="par">The security's par value.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.AMORDEGRC(System.Double,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the depreciation for each accounting period. This function is provided for the French accounting system. 
            If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account. 
            The function is similar to AMORLINC, except that a depreciation coefficient is applied in the calculation depending on the life of the assets.
            </summary>
            <param name="cost">The cost of the asset.</param>
            <param name="datePurchased">The date of the purchase of the asset.</param>
            <param name="firstPeriod">The date of the end of the first period.</param>
            <param name="salvage">The salvage value at the end of the life of the asset.</param>
            <param name="period">The period.</param>
            <param name="rate">The rate of depreciation.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.AMORLINC(System.Double,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the depreciation for each accounting period. 
            This function is provided for the French accounting system. 
            If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account.
            </summary>
            <param name="cost">The cost of the asset.</param>
            <param name="datePurchased">The date of the purchase of the asset.</param>
            <param name="firstPeriod">The date of the end of the first period.</param>
            <param name="salvage">The salvage value at the end of the life of the asset.</param>
            <param name="period">The period.</param>
            <param name="rate">The rate of depreciation.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list>
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPDAYS(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the depreciation for each accounting period.
            This function is provided for the French accounting system.
            If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPDAYSBS(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the number of days from the beginning of a coupon period until its settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPDAYSNC(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the number of days from the settlement date to the next coupon date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPNCD(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns a number that represents the next coupon date after the settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPNUM(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the number of coupons payable between the settlement date and maturity date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.COUPPCD(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the previous coupon date before the settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.CUMIPMT(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
             <summary>
             Returns the cumulative interest paid between two periods.
             </summary>
             <param name="rate">The interest rate.</param>
             <param name="nper">The total number of payment periods.</param>
             <param name="pv">The present value.</param>
             <param name="startPeriod">The first period in the calculation. Payment periods are numbered beginning with 1.</param>
             <param name="endPeriod">The last period in the calculation.</param>
             <param name="typ"> The timing of the payment:
            <list type="bullet">
             <item>
             <term>0: </term>
             <description>Payment at the end of the period.</description>
             </item>
             <item>
             <term>1: </term>
             <description>Payment at the beginning of the period.</description>
             </item>
             </list> 
             </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.CUMPRINC(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
             <summary>
             Returns the cumulative principal paid on a loan between two periods.
             </summary>
             <param name="rate">The interest rate.</param>
             <param name="nper">The total number of payment periods.</param>
             <param name="pv">The present value.</param>
             <param name="startPeriod">The first period in the calculation. Payment periods are numbered beginning with 1.</param>
             <param name="endPeriod">The last period in the calculation.</param>
             <param name="typ"> The timing of the payment:
            <list type="bullet">
             <item>
             <term>0: </term>
             <description>Payment at the end of the period.</description>
             </item>
             <item>
             <term>1: </term>
             <description>Payment at the beginning of the period.</description>
             </item>
             </list> 
             </param>
             <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DB(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the depreciation of an asset for a specified period by using the fixed-declining balance method.
            </summary>
            <param name="cost">The initial cost of the asset.</param>
            <param name="salvage">The value at the end of the depreciation (sometimes called the salvage value of the asset).</param>
            <param name="life">The number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).</param>
            <param name="period">The period for which you want to calculate the depreciation. Period must use the same units as life.</param>
            <param name="month"> The number of months in the first year. If month is omitted, it is assumed to be 12.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DDB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the depreciation of an asset for a specified period using the double-declining balance method.
            </summary>
            <param name="cost">The initial cost of the asset.</param>
            <param name="salvage">The value at the end of the depreciation (sometimes called the salvage value of the asset). This should be positive or zero otherwise an exception will be thrown.</param>
            <param name="life">The number of periods over which the asset is being depreciated.</param>
            <param name="period">The period for which you want to calculate the depreciation.</param>
            <remarks>It's crucial to use for the <paramref name="life"/> and the <paramref name="period"/> parameters the same unit (years, days... and so on). If not a result will be returned but obviously have an incorrect meaning.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DISC(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the discount rate for a security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="pr">The pr.</param>
            <param name="redemption"> The security's redemption value per $100 face value.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DOLLARDE(System.Double,System.Double)">
            <summary>
            Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.
            </summary>
            <param name="fractionalDollar">The fractional dollar.</param>
            <param name="fraction">The integer to use in the denominator of a fraction.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DOLLARFR(System.Double,System.Double)">
            <summary>
            Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.
            </summary>
            <param name="fractionalDollar">The fractional dollar.</param>
            <param name="fraction">The integer to use in the denominator of a fraction.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.DURATION(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the Macauley duration for an assumed par value of $100. 
            Duration is defined as the weighted average of the present value of the cash flows and is used as a measure of a bond price's response to changes in yield.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="coupon"> The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.EFFECT(System.Double,System.Double)">
            <summary>
            Returns the effective annual interest rate.
            </summary>
            <param name="nominalRate">The nominal interest rate.</param>
            <param name="npery">The number of compounding periods per year.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.FV(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the future value of an investment based on periodic, constant payments and a constant interest rate.
            </summary>
            <param name="rate">Rate is the interest rate per period.</param>
            <param name="nPer">Nper is the total number of payment periods in an annuity.</param>
            <param name="pmt">Pmt is the payment made each period; it cannot change over the life of the annuity. Typically, pmt contains principal and interest but no other fees or taxes. If pmt is omitted, you must include the pv argument.</param>
            <param name="pv">Pv is the present value, or the lump-sum amount that a series of future payments is worth right now. If pv is omitted, it is assumed to be 0 (zero), and you must include the pmt argument.</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.FVSCHEDULE(System.Double,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the future value of an initial principal after applying a series of compound interest rates.
            </summary>
            <param name="principal"> The present value.</param>
            <param name="schedule">An array of interest rates to apply.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.IPMT(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the interest payment for a given period for an investment based on periodic, constant payments and a constant interest rate.
            </summary>
            <param name="rate">Rate is the interest rate per period.</param>
            <param name="per">PerÂ is the period for which you want to find the interest and must be in the range 1 to nper</param>
            <param name="nPer">NperÂ Â Â is the total number of payment periods in an annuity.</param>
            <param name="pv">PvÂ is the present value, or the lump-sum amount that a series of future payments is worth right now.</param>
            <param name="fv">Fv is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.IRR(System.Double[],System.Double)">
             <summary>
             Returns the internal rate of return for a series of cash flows represented by the numbers in values. These cash flows do not have to be even, as they would be for an annuity. However, the cash flows must occur at regular intervals, such as monthly or annually. The internal rate of return is the interest rate received for an investment consisting of payments (negative values) and income (positive values) that occur at regular periods.
             </summary>
             <param name="values">
             ValuesÂ is an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.
             <list type="bullet">
            <item>Values must contain at least one positive value and one negative value to calculate the internal rate of return.</item>
             <item>
             IRR uses the order of values to interpret the order of cash flows. Be sure to enter your payment and income values in the sequence you want.
             </item>
             <item>If an array or reference argument contains text, logical values, or empty cells, those values are ignored.</item> 
             </list>
             </param>
             <param name="guess">
             GuessÂ  is a number that you guess is close to the result of IRR.
             <list type="bullet">
             <item>An iterative technique is used for calculating IRR. Starting with guess, IRR cycles through the calculation until the result is accurate within 0.00001 percent. If IRR can't find a result that works after 20 tries, the #NUM! error value is returned.</item>
             <item>In most cases you do not need to provide guess for the IRR calculation. If guess is omitted, it is assumed to be 0.1 (10 percent).</item>
             <item>If IRR gives the #NUM! error value, or if the result is not close to what you expected, try again with a different value for guess.</item>
             </list>
              </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ISPMT(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the interest paid during a specific period of an investment.
            </summary>
            <param name="rate">The interest rate for the investment.</param>
            <param name="per">The period for which you want to find the interest, and must be between 1 and nper.</param>
            <param name="nper"> The total number of payment periods for the investment.</param>
            <param name="pv">The present value of the investment. For a loan, pv is the loan amount.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.INRATE(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the interest rate for a fully invested security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="investment">The amount invested in the security.</param>
            <param name="redemption">The amount to be received at maturity.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.MDURATION(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the Macauley modified duration for a security with an assumed par value of $100.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="coupon">The security's annual coupon rate.</param>
            <param name="yld"> The security's annual yield.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.MIRR(System.Double[],System.Double,System.Double)">
            <summary>
            Returns the modified internal rate of return for a series of periodic cash flows. MIRR considers both the cost of the investment and the interest received on reinvestment of cash.
            </summary>
            <param name="values">
            Values is an array or a reference to cells that contain numbers. These numbers represent a series of payments (negative values) and income (positive values) occurring at regular periods.
            <list type="bullet">
            <item>
            Values must contain at least one positive value and one negative value to calculate the modified internal rate of return. Otherwise, MIRR returns the #DIV/0! error value.
            </item>
            <item>
            If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.
             </item>
            </list>
            </param>
            <param name="financeRate">Finance-rate is the interest rate you pay on the money used in the cash flows.</param>
            <param name="reinvestRate">Reinvest-rate is the interest rate you receive on the cash flows as you reinvest them.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.NPER(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.
            </summary>
            <param name="rate">RateÂ is the interest rate per period.</param>
            <param name="pmt">PmtÂ is the payment made each period; it cannot change over the life of the annuity. Typically, pmt contains principal and interest but no other fees or taxes.</param>
            <param name="pv">The PvÂ is the present value, or the lump-sum amount that a series of future payments is worth right now.</param>
            <param name="fv">FvÂ  is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.NPV(System.Double,System.Double[])">
            <summary>
            Returns the net present value of an investment by using a discount rate and a series of future payments (negative values) and income (positive values).
            </summary>
            <param name="rate">RateÂ is the rate of discount over the length of one period.</param>
            <param name="values">The array of payments equally spaced in time and occurring at the end of a period.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.NOMINAL(System.Double,System.Double)">
            <summary>
            Returns the annual nominal interest rate.
            </summary>
            <param name="effectRate">The effective interest rate.</param>
            <param name="npery">The number of compounding periods per year.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ODDFPRICE(System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the price per $100 face value of a security with an odd first period.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date.</param>
            <param name="firstCoupon">The security's first coupon date.</param>
            <param name="rate">The security's interest rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption"> The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ODDFYIELD(System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the yield of a security with an odd first period.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date.</param>
            <param name="firstCoupon">The security's first coupon date.</param>
            <param name="rate">The security's interest rate.</param>
            <param name="pr">The security's price.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ODDLPRICE(System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the price per $100 face value of a security with an odd last period.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="lastInterest"> The security's last coupon date.</param>
            <param name="rate">The security's interest rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption"> The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.ODDLYIELD(System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the yield of a security with an odd last period.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="lastInterest">The last interest.</param>
            <param name="rate">The security's interest rate</param>
            <param name="pr">The security's price.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PDURATION(System.Double,System.Double,System.Double)">
            <summary>
            Returns the number of periods required by an investment to reach a specified value.
            </summary>
            <param name="rate">Rate is the interest rate per period.</param>
            <param name="pv">Pv is the present value of the investment.</param>
            <param name="fv"> Fv is the desired future value of the investment.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PMT(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates the payment for a loan based on constant payments and a constant interest rate.
            </summary>
            <param name="rate">RateÂ is the interest rate per period.</param>
            <param name="nPer">Nper is the total number of payments for the loan.</param>
            <param name="pv">Pv is the present value, or the total amount that a series of future payments is worth now; also known as the principal.</param>
            <param name="fv">Fv is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PPMT(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the payment on the principal for a given period for an investment based on periodic, constant payments and a constant interest rate.
            </summary>
            <param name="rate">Rate is the interest rate per period.</param>
            <param name="per">PerÂ is the period for which you want to find the interest and must be in the range 1 to nper</param>
            <param name="nPer">NperÂ Â Â is the total number of payment periods in an annuity.</param>
            <param name="pv">PvÂ is the present value, or the lump-sum amount that a series of future payments is worth right now.</param>
            <param name="fv">Fv is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PV(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the present value of an investment. The present value is the total amount that a series of future payments is worth now. For example, when you borrow money, the loan amount is the present value to the lender.
            </summary>
            <param name="rate">Rate is the interest rate per period. For example, if you obtain an automobile loan at a 10 percent annual interest rate and make monthly payments, your interest rate per month is 10%/12, or 0.83%. You would enter 10%/12, or 0.83%, or 0.0083, into the formula as the rate.</param>
            <param name="nPer">Nper is the total number of payment periods in an annuity. For example, if you get a four-year car loan and make monthly payments, your loan has 4*12 (or 48) periods. You would enter 48 into the formula for nper.</param>
            <param name="pmt">Pmt is the payment made each period and cannot change over the life of the annuity. Typically, pmt includes principal and interest but no other fees or taxes. For example, the monthly payments on a $10,000, four-year car loan at 12 percent are $263.33. You would enter -263.33 into the formula as the pmt. If pmt is omitted, you must include the fv argument.</param>
            <param name="fv">Fv is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0). For example, if you want to save $50,000 to pay for a special project in 18 years, then $50,000 is the future value. You could then make a conservative guess at an interest rate and determine how much you must save each month. If fv is omitted, you must include the pmt argument.</param>
            <param name="due">The due parameter indicates when payments are due.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PRICE(System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the price per $100 face value of a security that pays periodic interest.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.PRICEDISC(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
             <summary>
            Returns the price per $100 face value of a discounted security
             </summary>
             <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
             <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
             <param name="discount">The security's discount rate.</param>
             <param name="redemption">The security's redemption value per $100 face value.</param>
             <param name="basis">The type of day count basis to use:
             <list type="bullet">
             <item>
             <term>0: </term>
             <description>US (NASD) 30/360</description>
             </item>
             <item>
             <term>1: </term>
             <description>Actual/actual</description>
             </item>
             <item>
             <term>2: </term>
             <description>Actual/360.</description>
             </item>
             <item>
             <term>3: </term>
             <description> Actual/365 </description>
             </item>
             <item>
             <term>4: </term>
             <description>European 30/360.</description>
             </item>
             </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.RATE(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
             <summary>
             Returns the interest rate per period of an annuity. RATE is calculated by iteration and can have zero or more solutions. If the successive results of RATE do not converge to within 0.0000001 after 20 iterations, RATE returns the #NUM! error value.
             </summary>
             <param name="nPer">Nper is the total number of payment periods in an annuity.</param>
             <param name="pmt">PmtÂ is the payment made each period and cannot change over the life of the annuity. Typically, pmt includes principal and interest but no other fees or taxes. If pmt is omitted, you must include the fv argument</param>
             <param name="pv">Pv is the present value â€” the total amount that a series of future payments is worth now.</param>
             <param name="fv">Fv is the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).</param>
             <param name="due">The due parameter indicates when payments are due.</param>
             <param name="guess">
            Guess is your guess for what the rate will be.
             <list type="bullet">
            <item>
            If you omit guess, it is assumed to be 10 percent.
             </item> 
             <item>If RATE does not converge, try different values for guess. RATE usually converges if guess is between 0 and 1. </item>
             </list>
             </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.RRI(System.Double,System.Double,System.Double)">
            <summary>
            Returns an equivalent interest rate for the growth of an investment.
            </summary>
            <param name="nper">Nper is the number of periods for the investment.</param>
            <param name="pv"> Pv is the present value of the investment.</param>
            <param name="fv">Fv is the future value of the investment.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.Received(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the amount received at maturity for a fully invested security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="investment">The amount invested in the security.</param>
            <param name="discount">The security's discount rate.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.SLN(System.Double,System.Double,System.Double)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.SYD(System.Double,System.Double,System.Double,System.Double)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.TBILLEQ(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Returns the bond-equivalent yield for a Treasury bill.
            </summary>
            <param name="settlement"> The Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.</param>
            <param name="maturity">The Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.</param>
            <param name="discount">The Treasury bill's discount rate.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.TBILLPRICE(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Returns the price per $100 face value for a Treasury bill.
            </summary>
            <param name="settlement"> The Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.</param>
            <param name="maturity">The Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.</param>
            <param name="discount">The Treasury bill's discount rate.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.TBILLYIELD(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Returns the yield for a Treasury bill.
            </summary>
            <param name="settlement"> The Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.</param>
            <param name="maturity">The Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.</param>
            <param name="pr">The Treasury bill's price per $100 face value.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.VDB(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
             <summary>
             Returns the depreciation of an asset for a specified or partial period by using a declining balance method.
             </summary>
             <param name="cost">The initial cost of the asset.</param>
             <param name="salvage">The value at the end of the depreciation (sometimes called the salvage value of the asset). This value can be 0.</param>
             <param name="life">The number of periods over which the asset is depreciated (sometimes called the useful life of the asset).</param>
             <param name="startPeriod">The starting period for which you want to calculate the depreciation. Start_period must use the same units as life.</param>
             <param name="endPeriod">The ending period for which you want to calculate the depreciation. End_period must use the same units as life.</param>
             <param name="factor">The rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method). Change factor if you do not want to use the double-declining balance method. For a description of the double-declining balance method, see <see cref="M:Telerik.Windows.Maths.FinancialFunctions.DDB(System.Double,System.Double,System.Double,System.Double)"/>.
             </param>
             <param name="noSwitch">A logical value specifying whether to switch to straight-line depreciation when depreciation is greater than the declining balance calculation:
             <list type="bullet">
             <item>
            <term>0: </term> 
             <description>
             switches to straight-line depreciation when depreciation is greater than the declining balance calculation
             </description>
             </item>
             <item>
            <term>1: </term> 
             <description>
             does not switch to straight-line depreciation even when the depreciation is greater than the declining balance calculation.
             </description>
             </item>
             </list>
             </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.VDB(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the depreciation of an asset for a specified or partial period by using a declining balance method.
            </summary>
            <param name="cost">The initial cost of the asset.</param>
            <param name="salvage">The value at the end of the depreciation (sometimes called the salvage value of the asset). This value can be 0.</param>
            <param name="life">The number of periods over which the asset is depreciated (sometimes called the useful life of the asset).</param>
            <param name="startPeriod">The starting period for which you want to calculate the depreciation. Start_period must use the same units as life.</param>
            <param name="endPeriod">The ending period for which you want to calculate the depreciation. End_period must use the same units as life.</param>
            <param name="factor">The rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method). Change factor if you do not want to use the double-declining balance method. For a description of the double-declining balance method, see <see cref="M:Telerik.Windows.Maths.FinancialFunctions.DDB(System.Double,System.Double,System.Double,System.Double)"/>.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.VDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the depreciation of an asset for a specified or partial period by using a declining balance method.
            </summary>
            <param name="cost">The cost.</param>
            <param name="salvage">The salvage.</param>
            <param name="life">The life.</param>
            <param name="startPeriod">The first period in the calculation. Payment periods are numbered beginning with 1.</param>
            <param name="endPeriod">The last period in the calculation.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.XIRR(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.DateTime},System.Double)">
            <summary>
            Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic.
            </summary>
            <param name="values">A series of cash flows that corresponds to a schedule of payments in dates. 
            The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment. If the first value is a cost or payment, it must be a negative value. 
            All succeeding payments are discounted based on a 365-day year. The series of values must contain at least one positive value and one negative value.</param>
            <param name="dates">A schedule of payment dates that corresponds to the cash flow payments. 
            The first payment date indicates the beginning of the schedule of payments. 
            All other dates must be later than this date, but they may occur in any order.</param>
            <param name="guess">A number that you guess is close to the result of XIRR.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.XIRR(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic.
            </summary>
            <param name="values">A series of cash flows that corresponds to a schedule of payments in dates. 
            The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment. If the first value is a cost or payment, it must be a negative value. 
            All succeeding payments are discounted based on a 365-day year. The series of values must contain at least one positive value and one negative value.</param>
            <param name="dates">A schedule of payment dates that corresponds to the cash flow payments. 
            The first payment date indicates the beginning of the schedule of payments. 
            All other dates must be later than this date, but they may occur in any order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.XNPV(System.Double,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Returns the net present value for a schedule of cash flows that is not necessarily periodic.
            </summary>
            <param name="rate">TThe discount rate to apply to the cash flows.</param>
            <param name="values">A series of cash flows that corresponds to a schedule of payments in dates. 
            The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment. If the first value is a cost or payment, it must be a negative value. 
            All succeeding payments are discounted based on a 365-day year. The series of values must contain at least one positive value and one negative value.</param>
            <param name="dates">A schedule of payment dates that corresponds to the cash flow payments. 
            The first payment date indicates the beginning of the schedule of payments. 
            All other dates must be later than this date, but they may occur in any order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.YIELD(System.DateTime,System.DateTime,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the yield on a security that pays periodic interest.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="pr">The security's price per $100 face value..</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year:
            <list type="bullet">
            <item>
            <term>1: </term>
            <description>annual payments</description>
            </item>
            <item>
            <term>2: </term>
            <description>semi-annual payments</description>
            </item>
            <item>
            <term>4: </term>
            <description>quarterly payments.</description>
            </item>
            </list>
            </param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.YIELDDISC(System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the annual yield for a discounted security; for example, a Treasury bill.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="pr">The security's price per $100 face value..</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.YIELDMAT(System.DateTime,System.DateTime,System.DateTime,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the annual yield of a security that pays interest at maturity.h
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date.</param>
            <param name="rate">TThe security's interest rate at date of issue.</param>
            <param name="pr">The security's price per $100 face value.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.YEARFRAC(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Calculates the fraction of the year represented by the number of whole days between two dates. Use the YEARFRAC worksheet function to identify the proportion of a whole year's benefits or obligations to assign to a specific term.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="basis">The type of day count basis to use:
            <list type="bullet">
            <item>
            <term>0: </term>
            <description>US (NASD) 30/360</description>
            </item>
            <item>
            <term>1: </term>
            <description>Actual/actual</description>
            </item>
            <item>
            <term>2: </term>
            <description>Actual/360.</description>
            </item>
            <item>
            <term>3: </term>
            <description> Actual/365 </description>
            </item>
            <item>
            <term>4: </term>
            <description>European 30/360.</description>
            </item>
            </list></param>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount">
            <summary>
            Utilities related to counting days and the diverse convention around it.
            See for example http://en.wikipedia.org/wiki/Day_count_convention.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount.IDayCounter">
            <summary>
            Defines the common methods of the day counting modules for each <see cref="T:Telerik.Windows.Maths.DayCountBasis"/>.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount.Actual360">
            <summary>
            Day count convention for calculating interest accrued on U.S. Treasury bills and other money market instruments. 
            Uses actual number of days in a month and 360 days in a year for calculating interest payments. 
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount.Actual365">
            <summary>
            Each month is treated normally and the year is assumed to be 365 days.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount.ActualActual">
            <summary>
            "Actual/Actual AFB/FBF Master Agreement" has the DiY equal to 365 (if the calculation period does not contain 29 February) or 366 (if 29 February falls within the Calculation Period or Compounding Period).
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.DayCount.Europ30360">
            <summary>
            The 360-day calendar is a method of measuring durations used in financial markets, in computer models, in ancient literature, and in prophetic literary genres. 
            It is based on merging the three major calendar systems into one complex clock, with the 360-day year as the average year of the lunar and the solar: 365.24 (solar) + 354.37(lunar) = 719.61 Ã· 2 = 359.8 days rounded to 360. 
            It is a simplification to a 360-day year, consisting of 12 months of 30 days each. To derive such a calendar from the standard Gregorian calendar, certain days are skipped.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FinancialFunctions.Common">
            <summary>
            Calculational utilities.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.Common.AggrBetween``1(System.Int32,System.Int32,System.Func{``0,System.Int32,``0},``0)">
            <summary>
            Aggregates in step of one from start to end using the given collector function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="collector">The collector.</param>
            <param name="seed">The seed.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FinancialFunctions.Common.Newton(System.Func{System.Double,System.Double},System.Double,System.Int32,System.Double)">
            <summary>
            The well-know Newton iterator.
            </summary>
            <param name="f">The underlying function.</param>
            <param name="x">The argumentx.</param>
            <param name="count">The count.</param>
            <param name="precision">The required precision.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.DueDate">
            <summary>
            Enumerates the moments at which payments occur.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DueDate.BeginOfPeriod">
            <summary>
            Payments occur at the begin of the period.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DueDate.EndOfPeriod">
            <summary>
            Payments occur at the end of the period.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.VdbSwitch">
            <summary>
            A logical value specifying whether to switch to straight-line depreciation when depreciation is greater than the declining balance calculation.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VdbSwitch.SwitchToStraightLine">
            <summary>
            Switches to straight-line depreciation when depreciation is greater than the declining balance calculation.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.VdbSwitch.DontSwitchToStraightLine">
            <summary>
            Does not switch to straight-line depreciation even when the depreciation is greater than the declining balance calculation.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Composition">
            <summary>
            Composition of functionals extensions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Composes two functions together.
            </summary>
            <remarks>This is the pipe-forward |> operation in F#.</remarks>
            <typeparam name="TDomain">The type of the source.</typeparam>
            <typeparam name="TIntermediate">The type of the intermediate result.</typeparam>
            <typeparam name="TTarget">The type of the end result.</typeparam>
            <param name="fun1">The first function.</param>
            <param name="fun2">The second function.</param>
            <returns>The function composition.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``4(System.Func{``0,``1,``2},System.Func{``2,``3})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``4(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1,``2},System.Func{``2,``3},System.Func{``3,``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``4,``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Func{``5,``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Func{``6,``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Func{``7,``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Func{``8,``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Func{``9,``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Func{``10,``11})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Func{``12,``13})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <typeparam name="TEndResult">The type of the end result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="func5">The fifth functional.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``2(System.Func{``0,``1},System.Action{``1})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``3(System.Func{``0,``1,``2},System.Action{``2})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``4(System.Func{``0,``1,``2,``3},System.Action{``3})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1,``2,``3,``4},System.Action{``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2,``3,``4,``5},System.Action{``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Action{``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Action{``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Action{``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Action{``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIntermediateResult">The type of the intermediate result.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``3(System.Func{``0,``1},System.Func{``1,``2},System.Action{``2})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``4(System.Func{``0,``1,``2},System.Func{``2,``3},System.Action{``3})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Action{``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Action{``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Action{``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Action{``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Action{``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Action{``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Action{``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``4(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Action{``3})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Action{``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Action{``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Action{``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Action{``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Action{``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Action{``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Action{``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Action{``11})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``5(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Action{``4})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``6(System.Func{``0,``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Action{``5})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``7(System.Func{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Action{``6})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``8(System.Func{``0,``1,``2,``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Action{``7})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``9(System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Action{``8})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``10(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Action{``9})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Action{``10})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Action{``11})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Composition.Compose``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Action{``12})">
            <summary>
            Composition of the given functionals.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TIR1">The type of the I r1.</typeparam>
            <typeparam name="TIR2">The type of the I r2.</typeparam>
            <typeparam name="TIR3">The type of the I r3.</typeparam>
            <typeparam name="TIR4">The type of the I r4.</typeparam>
            <param name="func1">The first functional.</param>
            <param name="func2">The second functional.</param>
            <param name="func3">The third functional.</param>
            <param name="func4">The fourth functional.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Currying">
            <summary>
            Currying extension methods.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Currying .</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``3(System.Func{``0,``1,``2})">
            <summary>
            Two-parameter currying to a one-parameter functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TRange">The data type of the range.</typeparam>
            <param name="func">The functional to curry.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the third parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Curries the given function.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being curried.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``2(System.Action{``0,``1})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``3(System.Action{``0,``1,``2})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Curry``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Curries the specified functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <returns>The curried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The data type of the range parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``2(System.Func{``0,System.Action{``1}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``3(System.Func{``0,System.Func{``1,System.Action{``2}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``4(System.Func{``0,System.Func{``1,System.Func{``2,System.Action{``3}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Action{``4}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Action{``5}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Action{``6}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Action{``7}}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Currying.Uncurry``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Action{``8}}}}}}}}})">
            <summary>
            Uncurries the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="func">The functional being uncurried.</param>
            <returns>The uncurried functional.</returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Functional">
            <summary>
            A collection of utility methods inspired by functional programming techniques in F#.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Functional.Rand">
            <summary>
            The randomizer.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Append``1(Telerik.Windows.Maths.FunctionalList{``0},Telerik.Windows.Maths.FunctionalList{``0})">
            <summary>
            Appends the given list to the current one.
            </summary>
            <param name="list">The one.</param>
            <param name="otherList">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.AreAllDifferent``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether all the elements are different in the given sequence.
            </summary>
            <typeparam name="T">The data type contained in the list.</typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Collect``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Collects elements into a new sequence by applying the given converter to each element.
            </summary>
            <typeparam name="TDomain">The data type of the list.</typeparam>
            <typeparam name="TRange">The data type of the target list.</typeparam>
            <param name="converter">The converter.</param>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenates the sequence of sequences into one sequence.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="sequences">The sequences.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Filters the list using a <see cref="T:System.Predicate`1"/>.
            </summary>
            <typeparam name="T">The data type of the list being filtered.</typeparam>
            <param name="predicate">The predicate.</param>
            <param name="list">The list being filtered.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Folds the list.
            </summary>
            <typeparam name="TDomain">The data type of the domain.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="list">The list.</param>
            <param name="accumulator">The accumulator functional; the first parameter is the current value of the accumulator and the second the current list value.</param>
            <param name="accumulatorStartValue">The accumulator's start value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.FoldList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Folds the list and returns the intermediate steps.
            </summary>
            <typeparam name="TDomain">The data type of the domain.</typeparam>
            <typeparam name="TTarget">The type of the range.</typeparam>
            <param name="list">The list.</param>
            <param name="accumulator">The accumulator functional; the first parameter is the current value of the accumulator and the second the current list value.</param>
            <param name="seed">The accumulator's start value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the action to each element of the sequence.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action)">
            <summary>
            Applies the action to each element of the sequence.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.HaveSameContent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the two given lists if they have the same item content, not necessarily in the same order.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="list1">The list1.</param>
            <param name="list2">The list2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.InitArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Creates an array and initializes the element through the given functional.
            </summary>
            <typeparam name="T">The data type of the arry elements.</typeparam>
            <param name="length">The length.</param>
            <param name="elementInit">The functional used to initialize the elements.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Lazy``1(System.Func{``0})">
            <summary>
            Returns a lazy instance defined by the given functional.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="func">The functional returning the instance for this lazy object.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Lazy``1(``0)">
            <summary>
            Returns a lazy instance defined by the given value.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Map``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Maps the elements of the list to a new list.
            </summary>
            <typeparam name="TOriginal">The type of the source elements.</typeparam>
            <typeparam name="TMapped">The type of the mapped elements.</typeparam>
            <param name="list">The list to map.</param>
            <param name="function">The function applied to the elements of the list.</param>
            <returns>The mapped list.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Remove``1(Telerik.Windows.Maths.FunctionalList{``0},``0)">
            <summary>
            Removes the specified list.
            </summary>
            <param name="list">The list.</param>
            <param name="element">The element to remove.</param>
            <returns>The list without the removed element.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverses the specified sequence.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Scramble``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random reordering of the given collection.
            </summary>
            <typeparam name="T">The data type of the enumerable collection.</typeparam>
            <param name="source">The source collection to be scrambled.</param>
            <returns>The same collection of elements in a different order.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Interpolate(System.Tuple{System.Double,System.Double},System.Tuple{System.Double,System.Double},System.Int32)">
            <summary>
            Interpolates linearly the specified range. to the specified target. 
            </summary>
            <example>
            If the range is [0,12] and the target [101,145] with a default subdivision of 100 the value zero will map to (0,101) and 50 to (6,123).
            The values outside the subdivision range will be clipped to the initial, respectively final value.
            </example>
            <param name="range">The range.</param>
            <param name="target">The target.</param>
            <param name="subdivision">The subdivision.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">subdivision</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.Swap``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>
            Swaps the specified func.
            </summary>
            <typeparam name="TDomain1">The type of the domain1.</typeparam>
            <typeparam name="TDomain2">The type of the domain2.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functional.ToFunctionalList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the given enumerable to a <see cref="T:Telerik.Windows.Maths.FunctionalList`1"/>.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.FunctionalList`1">
            <summary>
            A list implementation geared towards functional programming.
            </summary>
            <typeparam name="T">The data type on which the list is based.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Maths.FunctionalList`1.Empty">
            <summary>
            The empty functional list.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.#ctor(`0,Telerik.Windows.Maths.FunctionalList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalList`1"/> class.
            </summary>
            <param name="head">The head.</param>
            <param name="tail">The tail (list).</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalList`1"/> class.
            </summary>
            <param name="head">The head.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.#ctor(`0,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalList`1"/> class.
            </summary>
            <param name="firstValue">The first value.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalList`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.Cons(`0,Telerik.Windows.Maths.FunctionalList{`0})">
            <summary>
            Prepends the given element to the given list.
            </summary>
            <param name="element">The element to prepend.</param>
            <param name="list">The list or tail.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.Append(Telerik.Windows.Maths.FunctionalList{`0})">
            <summary>
            Appends the given list.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.Cons(`0)">
            <summary>
            Prepends the specified element.
            </summary>
            <remarks>This mimics the '::' operator from F#.</remarks>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.Remove(`0)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalList`1.Head">
            <summary>
            Gets the head of the list.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalList`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalList`1.Tail">
            <summary>
            Gets the tail of the list.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FunctionalQueue`1">
            <summary>
            An implementation of a queue geared towards functional programming.
            </summary>
            <typeparam name="TData">The data type contained in the queue.</typeparam>
        </member>
        <member name="F:Telerik.Windows.Maths.FunctionalQueue`1.Empty">
            <summary>
            Returns the empty queue.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalQueue`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.#ctor(`0,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalQueue`1"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.#ctor(Telerik.Windows.Maths.FunctionalList{`0},Telerik.Windows.Maths.FunctionalList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalQueue`1"/> class.
            </summary>
            <param name="f">The first.</param>
            <param name="r">The values.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.Snoc(Telerik.Windows.Maths.FunctionalQueue{`0},`0)">
            <summary>
            Snocs the specified element, i.e.. adds it to the end of the queue.
            </summary>
            <param name="queue">The queue.</param>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.Snoc(`0)">
            <summary>
            Appends the given element.
            </summary>
            <param name="element">The element to append to the queue.</param>
            <returns>The resulting queue.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalQueue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalQueue`1.Count">
            <summary>
            Gets the number of elements in this queue.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalQueue`1.Head">
            <summary>
            Gets the head of this queue.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalQueue`1.IsEmpty">
            <summary>
            Gets this queue is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalQueue`1.Tail">
            <summary>
            Gets the tail of this queue.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.FunctionalLazy`1">
            <summary>
            A lazy construct geared towards functional programming.
            </summary>
            <typeparam name="T">The data type of the list.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalLazy`1"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalLazy`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.FunctionalLazy`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalLazy`1.Force">
            <summary>
            Forces an instantiation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.FunctionalLazy`1.UnsynchronizedForce">
            <summary>
            Unsynchronizeds the force.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalLazy`1.Exception">
            <summary>
            Gets the exception which was raised during instantiation, if any.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalLazy`1.HasException">
            <summary>
            Gets whether the instantiation raised an exception.
            </summary>
            <value>
            	<c>true</c> if this instance has exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalLazy`1.IsForced">
            <summary>
            Gets a value indicating whether this instance is forced.
            </summary>
            <value>
              <c>true</c> if this instance is forced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Maths.FunctionalLazy`1.Value">
            <summary>
            Gets the value and induces an instantiation.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Memoization">
            <summary>
            Memoization extensions.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Memoization. </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoizes the specified functional.
            </summary>
            <typeparam name="TDomain">The data type of the domain. </typeparam>
            <typeparam name="TRange">The data type of the range.</typeparam>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memoize``2(System.Func{``0,``1},System.String)">
            <summary>
            Memoizes the specified functional and stores the values at the speicified key.
            </summary>
            <typeparam name="TDomain">The data type of the domain.</typeparam>
            <typeparam name="TRange">The data type of the range.</typeparam>
            <param name="f">The f.</param>
            <param name="memoryKey">The memory key to use when storing the values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.GetKeyForMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets a memory keyed using the methodinfo.
            </summary>
            <param name="info">The info of the functional.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Memoization.IMemory`2">
            <summary>
            Describes a memoization memory.
            </summary>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.IMemory`2.HasResultFor(`0)">
            <summary>
            Determines whether there is already a result for the given value.
            </summary>
            <param name="val">The val.</param>
            <returns>
              <c>true</c> if [has result for] [the specified val]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.IMemory`2.Remember(`0,`1)">
            <summary>
            Remembers the specified value.
            </summary>
            <param name="val">The val.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.IMemory`2.ResultFor(`0)">
            <summary>
            Returns the result for the given value.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Memoization.Memoizer`2">
            <summary>
            Memoization of functionals.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Memoization .</remarks>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memoizer`2.GetMemory(System.String)">
            <summary>
            Gets the memory for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memoizer`2.CreateMemory``1(System.String)">
            <summary>
            Creates the memory for the key.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memoizer`2.CreateMemory(System.String)">
            <summary>
            Creates a memory and stores it at the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Memoization.Memory`2">
            <summary>
            The memoization memory.
            </summary>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memory`2.HasResultFor(`0)">
            <summary>
            Determines whether there is already a result for the given value.
            </summary>
            <param name="val">The val.</param>
            <returns>
              <c>true</c> if [has result for] [the specified val]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memory`2.Remember(`0,`1)">
            <summary>
            Remembers the specified value.
            </summary>
            <param name="val">The val.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Memoization.Memory`2.ResultFor(`0)">
            <summary>
            Returns the result for the given value.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.PartialFunction">
            <summary>
            Extensions related to partial functional applications.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The type of the 1.</typeparam>
            <typeparam name="TDomain2">The type of the 2.</typeparam>
            <typeparam name="TRange">The type of the R.</typeparam>
            <param name="func">The functional.</param>
            <param name="x">The value on which the functional will be partially applied.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``4(System.Func{``0,``1,``2,``3},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Func{``0,``1,``2,``3,``4},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Func{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="function">The function.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <param name="arg8">The eigth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``2(System.Action{``0,``1},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``3(System.Action{``0,``1,``2},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``3(System.Action{``0,``1,``2},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``4(System.Action{``0,``1,``2,``3},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``4(System.Action{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Action{``0,``1,``2,``3,``4},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Action{``0,``1,``2,``3,``4},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Action{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PartialFunction.Partial``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partial application of the given functional.
            </summary>
            <typeparam name="TDomain1">The data type of the first parameter.</typeparam>
            <typeparam name="TDomain2">The data type of the second parameter.</typeparam>
            <typeparam name="TDomain3">The data type of the thrid parameter.</typeparam>
            <typeparam name="TDomain4">The data type of the fourth parameter.</typeparam>
            <typeparam name="TDomain5">The data type of the fifth parameter.</typeparam>
            <typeparam name="TDomain6">The data type of the sixth parameter.</typeparam>
            <typeparam name="TDomain7">The data type of the seventh parameter.</typeparam>
            <typeparam name="TDomain8">The data type of the eigth parameter.</typeparam>
            <typeparam name="TDomain9">The data type of the ninth parameter.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <param name="arg6">The sixth argument.</param>
            <param name="arg7">The seventh argument.</param>
            <param name="arg8">The eigth argument.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Range">
            <summary>
            Implementation of the <see cref="T:Telerik.Windows.Maths.Range"/> for a set of common data types.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Byte,System.Byte)">
            <summary>
            Creates a range of bytes within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Int16,System.Int16)">
            <summary>
            Creates a range of <c>Int16</c> integers within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Int32,System.Int32)">
            <summary>
            Creates a range of integers within the given interval.
            </summary>
            <param name="start">Inclusive start of the range.</param>
            <param name="end">Inclusive end of the range.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Int64,System.Int64)">
            <summary>
            Creates a range of <c>Int64</c> integers within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.ToArray``1(Telerik.Windows.Maths.Range{``0})">
            <summary>
            Returns an array of the range.
            </summary>
            <typeparam name="T">The data type of the range.</typeparam>
            <param name="range">The range.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Double,System.Double)">
            <summary>
            Creates a range of doubles within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a range of doubles starting from a certain and with an amount of step.
            </summary>
            <param name="start">The start.</param>
            <param name="step">The step.</param>
            <param name="amount">The amount.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">amount;The amount should be greater than one.</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Single,System.Single)">
            <summary>
            Creates a range of floats within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Decimal,System.Decimal)">
            <summary>
            Creates a range of decimals within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.Char,System.Char)">
            <summary>
            Creates a range of chars within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create(System.DateTime,System.DateTime)">
            <summary>
            Creates a range of datetime values within the given interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create``1(``0,``0,System.Func{``0,``0},System.Comparison{``0})">
            <summary>
            Creates a range of values within the given interval using a 'next' functional and a comparison to ensure the end-value can be compared..
            </summary>
            <typeparam name="T">The data type of the sequence.</typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="getNext">The get next.</param>
            <param name="compare">The compare.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.Create``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Creates a range of values within the given interval using a 'next' functional.
            </summary>
            <typeparam name="T">The data type of the sequence.</typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="getNext">The get next.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Ensures the range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range.CreateRectangle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the rectangle.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Sequence">
            <summary>
            Sequence extensions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.AreSameLists``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the two given lists per item if they are the same.
            </summary>
            <typeparam name="T">The data type contained in the lists.</typeparam>
            <param name="list1">A sequence.</param>
            <param name="list2">Another sequence.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Create``1(System.Func{``0,``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            Creates a sequence.
            </summary>
            <typeparam name="TData">The data type of the sequence.</typeparam>
            <param name="getNext">The next method.</param>
            <param name="startVal">The start value.</param>
            <param name="endReached">The method specifying when the end has been reached.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.CreateRandomDates(System.Int32)">
            <summary>
            Creates a sequence of random dates over the maximum datetime interval.
            </summary>
            <param name="count">The length of the sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.CreateRandomNumbers(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sequence of random integers.
            </summary>
            <param name="count">The length of the sequence.</param>
            <param name="min">The minimum value of the random integers.</param>
            <param name="max">The maximum value of the integers.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.CreateRandomDoubles(System.Int32,System.Double,System.Double)">
            <summary>
            Creates a sequence of random floating point numbers.
            </summary>
            <param name="count">The length of the sequence.</param>
            <param name="min">The minimum value of the random sequence values.</param>
            <param name="max">The maximum value of the random sequence values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.FindDuplicates(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Finds the duplicates in the list of points which leads to loops in the paths.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.CreateSequence``1(System.Func{``0,``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            Creates a custom enumerable sequence.
            </summary>
            <remarks>The sequence can be infinite in contrast to lists and other similar structures.</remarks>
            <typeparam name="T">The data type of the sequence.</typeparam>
            <param name="getNext">The get next.</param>
            <param name="startVal">The start val.</param>
            <param name="endReached">The end reached.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Clone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones the specified list.
            </summary>
            <param name="list">The list to clone.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.CopyTo``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
            Copies the content of the given array into the specified list.
            </summary>
            <typeparam name="T">The type type.</typeparam>
            <param name="sourceArray">The source array.</param>
            <param name="distinationList">The distination list.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.ToPrettyFormat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a more readable format of the string sequence.
            </summary>
            <param name="list">The list.</param>
            <param name="amountToShow">The amount of items to present in the output.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the variance of the given sequence.
            </summary>
            <param name="data">A sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the standard deviation of the sequence.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Create``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Creates a sequence using the given function.
            </summary>
            <typeparam name="T">The data type of the sequence.</typeparam>
            <param name="f">The function which maps the zero-based enumeration to the type of the sequence.</param>
            <param name="count">The length of the sequence to generate.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">count</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Drop``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Drops the element at the specified position. For position values this is equivalent to the <see cref="M:Telerik.Windows.Maths.Sequence.RemoveAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method. For negative values 
            the -1 position will remove the last elements and so on.
            </summary>
            <typeparam name="T">The data type of the sequence.</typeparam>
            <param name="list">The list.</param>
            <param name="position">The position at which the element has to be removed.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot drop at position zero; the sequence is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The negative position is beyond the start of the sequence.;position</exception>
        </member>
        <member name="M:Telerik.Windows.Maths.Sequence.Plus(System.Collections.Generic.IEnumerable{System.Double}[])">
            <summary>
            Sums the elements of the two sequences.
            </summary>
            <param name="seqs">A sequence of doubles.</param>
            <param name="b">Another sequence of doubles.</param>
            <returns></returns>
            <exception cref="T:System.Exception">The length of the sequences are not the same.</exception>
        </member>
        <member name="T:Telerik.Windows.Maths.Functions">
            <summary>
            Special mathematical functions and polynomials.
            </summary>
            <seealso cref="T:Telerik.Windows.Maths.EngineeringFunctions"/>
            <seealso cref="T:Telerik.Windows.Maths.FinancialFunctions"/>
            <seealso cref="T:Telerik.Windows.Maths.Trigonometry"/>
        </member>
        <member name="F:Telerik.Windows.Maths.Functions.FactorialLnCacheSize">
            <summary>
            The factorial ln cache size.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Functions.FactorialPrecompSize">
            <summary>
            The factorial precomp size.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Functions.FactorialPrecomp">
            <summary>
            The factorial precomp.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.Functions.factorialLnCache">
            <summary>
            The <see cref="M:Telerik.Windows.Maths.Functions.FactorialLn(System.Int32)"/> cache.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns the binomial coefficient of two integers as a double precision number.
            </summary>
            <param name="n">
            A number.
            </param>
            <param name="k">
            A number.
            </param>
            <remarks>http://en.wikipedia.org/wiki/Binomial_coefficient</remarks>
            <seealso cref="M:Telerik.Windows.Maths.Functions.BinomialCoefficientLn(System.Int32,System.Int32)"/>
            <seealso cref="T:Telerik.Windows.Maths.BinomialDistribution"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            The regularized incomplete beta function (or regularized beta function for short) is defined in terms of the incomplete beta function and the complete beta function. 
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Regularized_Beta_function</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BinomialCoefficientLn(System.Int32,System.Int32)">
            <summary>
            Returns the natural logarithm of the binomial coefficient of n and k.
            </summary>
            <param name="n">
            A number
            </param>
            <param name="k">
            A number
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            Relative Epsilon (positive double or NaN).
            </returns>
            <remarks>
            Evaluates the <b>Negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Factorial(System.Int32)">
            <summary>
            Returns the factorial (n!) of an integer number &gt; 0. Consider using <see cref="M:Telerik.Windows.Maths.Functions.FactorialLn(System.Int32)"/> instead.
            </summary>
            <param name="n">
            The argument.
            </param>
            <returns>
            A value value! for value &gt; 0.
            </returns>
            <remarks>
            http://en.wikipedia.org/wiki/Factorial
            </remarks>
            <seealso cref="M:Telerik.Windows.Maths.Functions.FactorialLn(System.Int32)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.FactorialLn(System.Int32)">
            <summary>
            Returns the natural logarithm of the factorial (n!) for an integer value &gt; 0.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            A value ln(value!) for value &gt; 0.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of Gamma for a real value &gt; 0.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            A value ln|Gamma(value))| for value &gt; 0.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Gamma(System.Double)">
            <summary>
            Returns the gamma function.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Gamma_function</remarks>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.GammaRegularized(System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">
            The a.
            </param>
            <param name="x">
            The x.
            </param>
            <remarks>Note that some packages like Mathematica define the regularized gamma function differently.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Squared(System.Double)">
            <summary>
            Returns the square of the given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Sqr(System.Double)">
            <summary>
            Returns the square of the given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Si(System.Double)">
            <summary>
            The sine integral function.
            </summary>
            <param name="x">A number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Ci(System.Double)">
            <summary>
            The cosine integral function.
            </summary>
            <param name="x">A number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Erf(System.Double)">
            <summary>
            Returns the error function.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.ErfC(System.Double)">
            <summary>
            Returns the complementary or inverse error function.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Laguerre(System.Double,System.Int32)">
            <summary>
            The Laguerres polynomial value for the specified number and order.
            </summary>
            <param name="x">A number.</param>
            <param name="order">The order of the Laguerre polynomial.</param>
            <remarks>http://en.wikipedia.org/wiki/Laguerre_polynomials</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Hermite(System.Double,System.Int32)">
            <summary>
            The Hermite polynomial value for the specified number and order.
            </summary>
            <param name="x">A number.</param>
            <param name="order">The order of the Hermite polynomial.</param>
            <remarks>http://en.wikipedia.org/wiki/Hermite_polynomials</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.Legendre(System.Double,System.Int32)">
            <summary>
            The Legendre polynomial value for the specified number and order.
            </summary>
            <param name="x">A number.</param>
            <param name="order">The order of the Legendre polynomial.</param>
            <remarks>http://en.wikipedia.org/wiki/Legendre_polynomials</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.IsNanOrInfinity(System.Double)">
            <summary>
            Gets whether the value is double or infinity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.IsFinitedouble(System.Double)">
            <summary>
            Returns whether the given double is not infinite and an actual number (not NaN).
            </summary>
            <param name="x">The x.</param>
            <returns>
              <c>True</c> if the value is true number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.GCD(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor of two numbers.
            </summary>
            <param name="value1">The first number.</param>
            <param name="value2">The second number.</param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.GCD(System.Int64[])">
            <summary>
            Returns the greatest common divisor of the given numbers.
            </summary>
            <param name="numbers">Some numbers.</param>
            <returns>
            The greatest common divisor.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BesselJ(System.Double,System.Double)">
            <summary>
            The Bessel function of the first kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="n">The order of the Bessel function.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BesselI(System.Double,System.Double)">
            <summary>
            The modified Bessel function of the first kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BesselK(System.Double,System.Double)">
            <summary>
            The modified Bessel function of the second kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.BesselY(System.Double,System.Double)">
            <summary>
            The Bessel function of the second kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.SphericalBesselJ(System.Double,System.Int32)">
            <summary>
            The spherical Bessel function of the first kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="n">The order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.SphericalBesselY(System.Double,System.Int32)">
            <summary>
            The spherical Bessel function of the second kind.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Bessel_function</remarks>
            <param name="x">The argument.</param>
            <param name="n">The order.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.bessjy(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Bessel J and Y for fractional order.
            </summary>
            <param name="x"></param>
            <param name="xnu"></param>
            <param name="rj"></param>
            <param name="ry"></param>
            <param name="rjp"></param>
            <param name="ryp"></param>
        </member>
        <member name="M:Telerik.Windows.Maths.Functions.bessik(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Bessel I and K for fractional order.
            </summary>
            <param name="x"></param>
            <param name="xnu"></param>
            <param name="ri"></param>
            <param name="rk"></param>
            <param name="rip"></param>
            <param name="rkp"></param>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToRectanglePoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distances to rectangle point.
            </summary>
            <param name="pt">The pt.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistToRectSelect(System.Double,System.Double,System.Double)">
            <summary>
            Dists to rect select.
            </summary>
            <param name="pointX">The point X.</param>
            <param name="rectX1">The rect x1.</param>
            <param name="rectX2">The rect x2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToRectangle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distances to rectangle.
            </summary>
            <param name="pt">The pt.</param>
            <param name="rc">The rc.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToBezierCurve(System.Windows.Point,System.Collections.IList)">
            <summary>
            Returns the shortest distance to the Bezier curve.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToPolyline(System.Windows.Point,System.Collections.IList)">
            <summary>
            Returns the shortest distance to the polyline.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToPolyline(System.Windows.Point,System.Collections.IList,System.Int32@)">
            <summary>
            Returns the shortest distance to the polyline.
            </summary>
            <param name="point">The point.</param>
            <param name="polyline">The polyline.</param>
            <param name="closestSegmentToPoint">The closest segment to point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToLineSegment(System.Windows.Point,System.Collections.IList,System.Double)">
            <summary>
            Distances to line segment.
            </summary>
            <param name="point">The point.</param>
            <param name="polyline">The polyline.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance from the given point to the line (segment).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToLineSquared(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Distances to line squared.
            </summary>
            <param name="p">The p.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceToSegmentSquared(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance of a point to a segment. If the projection
            of the point on the segment is outside the segment the distance is
            the distance to the closest point of the segment. This in effect defines
            some kind of elliptic neighborhood around the segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Distance(System.Windows.Point)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
            <param name="p">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Distance(System.Double,System.Double)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the specified points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.DistanceSquared(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the squared distance between the given points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Closer(System.Double,System.Double,System.Double)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Closer(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
            <param name="value">The value.</param>
            <param name="choice1">The first choice.</param>
            <param name="choice2">The second choice.</param>
            <param name="nearestValue">The nearest value.</param>
            <param name="otherValue">The other value.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.DistanceExstensions.Closer(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point of the interval which sits the closest to the given point.
            </summary>
            <param name="point">The point seeking the closes neighbor.</param>
            <param name="p1">The first point in the interval.</param>
            <param name="p2">The second point in the interval.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsVerySmall(System.Double)">
            <summary>
            Returns whether the given value is less than an <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/>.
            </summary>
            <param name="value">A value.</param>
            <returns>
              <c>true</c> if less than <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Checks whether two values are close, i.e. the absolute value of their difference is less than <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/>.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether a given value is strictly less than another one in an epsilon sense.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than the second or only an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsLessThanOrCloseTo(System.Double,System.Double)">
            <summary>
            Determines whether a given value is strictly less than another one in an epsilon sense.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than the second or only an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsLessOrEqual(System.Double,System.Double)">
            <summary>
            Determines whether a given value is less than or equal to another one in an epsilon sense.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than or equal to the second or only an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsLessOrEqualTo(System.Double,System.Double)">
            <summary>
            Determines whether a given value is less than or equal to another one in an epsilon sense.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than or equal to the second or only an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsLessThan(System.Double,System.Double)">
            <summary>
            Determines whether a given value is strictly less than another one  and not an epsilon away.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than the second and not an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determines whether a given value is strictly bigger than another one and not an epsilon away.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than the second and not an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsGreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Determines whether a given value is strictly bigger than another one or an epsilon away.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the first value is less than the second or an epsilon apart; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsEqualTo(System.Double,System.Double)">
            <summary>
            Determines whether the double values are equal up to an epsilon.
            </summary>
            <param name="value1">A double value.</param>
            <param name="value2">Another double value.</param>
            <returns>
              <c>True</c> If the values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsZero(System.Double,System.Double)">
            <summary>
            Determines whether number is as good as zero within the <see cref="F:Telerik.Windows.Maths.Constants.Epsilon"/> bounds.
            </summary>
            <param name="value">The value to test.</param>
            <param name="accuracy">The accuracy or bounds within which the value has to be in order to be considered as zero.</param>
            <returns>
              <c>true</c> if the specified absolute value is within the accuracy; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.EpsilonExtensions.IsNotEqualTo(System.Double,System.Double)">
            <summary>
            Determines whether the two values are different in an epsilon sense.
            </summary>
            <param name="value1">A value.</param>
            <param name="value2">Another value.</param>
            <returns>
              <c>True</c> if the values are equal up to epsilon; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryApproximations.ApproximateArc(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Approximates the arc.
            </summary>
            <param name="topLeft">The topLeft.</param>
            <param name="bottomRight">The bottomRight.</param>
            <param name="startAngle">The angle in degrees at which the arc starts.</param>
            <param name="endAngle">The angle in degrees at which the arc ends.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryApproximations.ApproximateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius of the rounding.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryApproximations.ApproximateRoundedRectangle(System.Windows.Rect,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryApproximations.ApproximateBezierCurve(System.Windows.Point[],System.Int32)">
            <summary>
            Approximates the bezier curve.
            </summary>
            <param name="bezierPoints">The bezier points.</param>
            <param name="quality">The quality.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryApproximations.ApproximateBezierCurve(System.Windows.Point[],System.Int32,System.Int32)">
            <summary>
            Computes an approximation of a Bezier segment by a polyline (list of points).
            </summary>
            <param name="bezierPoints">The points defining the Bezier curve.</param>
            <param name="index">The index at which the four Bezier start.</param>
            <param name="quality">The quality of the approximation.</param>
            <returns>The approximation as a list points (polyline).</returns>        
        </member>
        <member name="T:Telerik.Windows.Maths.GeometryIntersections">
            <summary>
            Geometric intersection and overlap methods.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.AreIntersecting(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns whether the two rectangles intersect.
            </summary>
            <param name="rectangle"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.AreIntersecting(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Returns whether the specified rectangle and circle intersect.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IsPointInEllipse(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns whether the specified point is inside the ellipse defined by the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IsPointInRectangle(System.Windows.Point,System.Windows.Size)">
            <summary>
            Determines whether [is point in rectangle] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectsCircle(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Returns whether the specified rectangle and circle intersect.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.AreLinesIntersecting(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Returns whether the line (line segments) intersect and returns in the crossingPoint the actual crossing
            point if they do.
            </summary>
            <param name="a">The first point of the first line.</param>
            <param name="b">The second point of the first line.</param>
            <param name="c">The first point of the second line.</param>
            <param name="d">The second point of the second line.</param>
            <param name="intersectionPoint">The crossing point, if any.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectsLineSegment(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Returns whether the rectangle and the segment intersect.
            </summary>
            <param name="rect">A rectangle.</param>
            <param name="a">An endpoint of the segment.</param>
            <param name="b">The complementary endpoint of the segment.</param>
            <param name="intersectionPoint">The crossing point, if any.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectsLine(System.Windows.Rect,System.Collections.IList)">
            <summary>
            Returns whether the polyline segment intersect the rectangle.
            </summary>
            <param name="rect">A rectangle</param>
            <param name="polyline">A polyline.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Maths.GeometryIntersections.IntersectsLineSegment(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns whether the given rectangle intersects the current one.
            </summary>
            <param name="r1">The first rectangle.</param>
            <param name="r2">The queried rectangle which potentially intersects.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.SegmentIntersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Checks whether the segments defined by the specified
            point pairs intersect and returns the intersection point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.FindLinesIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Finds the intersection point of the lines defined by the point pairs.
            </summary>
            <returns>
            The intersection point. If acceptNaN is <c>true</c> a <c>double.NaN</c> is returned if they don't intersect.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectionPoint(System.Windows.Rect,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculate the intersection point between an ellipse and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectionPointOnEllipse(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculate the intersection point between a polyline and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometryIntersections.IntersectionPointOnRectangle(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculates the intersection point between the specified
            rectangle and the line segment defined by the specified
            points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.Add(System.Windows.Media.PathGeometry,System.Windows.Media.PathFigure)">
            <summary>
            Adds the given figure to the geometry.
            </summary>
            <param name="pathGeometry">The path geometry.</param>
            <param name="pathFigure">The path figure.</param>
            <returns>The resulting path geometry.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.Add(System.Windows.Media.PathFigure,System.Windows.Media.PathSegment,System.Windows.Point)">
            <summary>
            Adds the given <see cref="T:System.Windows.Media.PathSegment"/> to the path figure and sets the starting point at the same time.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="segment">The segment.</param>
            <param name="startPoint">The start point.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.Add(System.Windows.Media.PathFigure,System.Windows.Media.PathSegment)">
            <summary>
            Adds the given <see cref="T:System.Windows.Media.PathSegment"/> to the path figure.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="segment">The segment.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddLine(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a line to the path.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddLine(System.Windows.Media.PathFigure,System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds a line to the path.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="p1">The start point of the line.</param>
            <param name="p2">The end point of the line.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddPolyLine(System.Windows.Media.PathFigure,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Adds a polyline to the figure.
            </summary>
            <param name="pathFigure">The figure.</param>
            <param name="points">The points defining the polyline.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddPolyLine(System.Windows.Media.PathFigure,System.Windows.Media.PointCollection)">
            <summary>
            Adds a polyline to the figure.
            </summary>
            <param name="pathFigure">The figure.</param>
            <param name="collection">The points defining the polyline.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddRoundRect(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a rounded rectangle to the path figure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddRoundRect(System.Windows.Media.PathFigure,System.Windows.Rect,System.Double,System.Boolean)">
            <summary>
            Adds a rounded rectangle to the path figure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddArc(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an arc to the path figure.
            </summary>
            <param name="pathFigure">The figure.</param>
            <param name="x">The x-coordinate of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the bounding rectangle.</param>
            <param name="w">The width of the bounding rectangle.</param>
            <param name="h">The height of the bounding rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweep">The sweeping angle of the arc.</param>
            <param name="startPoint">If set to <c>true</c> the starting point will be set.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddArc(System.Windows.Media.PathFigure,System.Windows.Rect,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds the arc.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="rectangle">The bounding rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweep">The sweeping angle of the arc.</param>
            <param name="setStartingPoint">If set to <c>true</c> the starting point will be set.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddBezier(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            Adds a bezier segment to the path.
            </summary>
            <param name="pathFigure">The path.</param>
            <param name="points">The eight values specifying the eight coordinates of the four Bezier points.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.AddBeziers(System.Windows.Media.PathFigure,System.Windows.Point[])">
            <summary>
            Adds a bezier segment to the path.
            </summary>
            <param name="pathFigure">The figure.</param>
            <param name="points">The points defining the Bezier segment.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PathFigureExtensions.ArcPoint(System.Windows.Rect,System.Double)">
            <summary>
            Returns the point at an angle on the ellipse with axes specified by the given rectangle.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.PointExtensions">
            <summary>
            Extensions for the Point class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Add(System.Windows.Point,System.Windows.Vector)">
            <summary>
            Adds the specified point and vector together.
            </summary>
            <seealso cref="T:System.Windows.Vector">The Vector struct and its operations.</seealso>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>The augmented point.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds the specified points together.
            </summary>
            <param name="point">A point.</param>
            <param name="p2">The p2.</param>
            <returns>
            The augmented point.
            </returns>
            <seealso cref="T:System.Windows.Vector">The Vector struct and its operations.</seealso>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Swap(System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Swaps the values of the two points.
            </summary>
            <param name="p">A point.</param>
            <param name="q">Another point.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Offset(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Vector)">
            <summary>
            Offsets the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Snap(System.Windows.Point,System.Int32,System.Int32)">
            <summary>
            Snaps a point by changing the X and Y coordinates to the closest value dividable by the snapping value.
            </summary>
            <param name="point">The point.</param>
            <param name="snapX">The horizontal snapping value.</param>
            /// <param name="snapY">The vertical snapping value.</param>
            <returns>Returns the snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.BarycentricPercentageFromPoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the barycentric coordinates as percentages with respect to the given rectangle.
            </summary>
            <param name="realPoint">The real point.</param>
            <param name="rectangle">The rectangle which acts as a barycentric coordinate system.</param>
            <returns>The percentages wrapped in a Point.</returns>
            <remarks>The right side of the rectangle corresponds to a value of 100. If the position is left of the left side of rectanlge the value will be negative.</remarks>
            <see cref="M:Telerik.Windows.Maths.PointExtensions.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">The complementary method.</see>        
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">
            <summary>
            Given a percentage and a rectangle this will return the coordinates corresponding to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="size">The size from which the point will be extracted.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns> 
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Given a percentage and a rectangle this will return the coordinates corresponding
            to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="rectangle">The rectangle which acts as the barycentric system.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns>         
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.IsXBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether the given point is horizontally between two points.
            </summary>
            <remarks>The interval includes the endpoints.</remarks>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if the X-coordinate is located in the interval of the X-coordinates of the other points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.IsYBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether the given point is vertically between two points.
            </summary>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if the Y-coordinate is located in the interval of the Y-coordinates of the other points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Rotate(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotatates the specified point with respect to an achor point.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="anchorPoint">The anchor point of the rotation.</param>
            <param name="angle">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.ContainsInNeighborhood(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines whether another point sits in a delta neighborhood.
            </summary>
            <param name="originPoint">The point which determines the neighborhood.</param>
            <param name="point">The point which is tested for being contained in the neighborhood of <see cref="!:originPoint"/>.</param>
            <param name="delta">The size of the square around the <see cref="!:originPoint"/> which acts as a neighborhood around the point.</param>
            <returns>
              <c>true</c> if <see cref="!:point"/> is in the neghborhood of <see cref="!:originPoint"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.ToPoint(System.String)">
            <summary>
            Attempts to convert the given string to a Point.
            </summary>
            <param name="s">The string representation of the point.</param>
            <returns>The Point corresponding to the serialized form.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.RotatePoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotates the point.
            </summary>
            <param name="point">The point.</param>
            <param name="pivot">The pivot.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.RotatePointsAt(System.Windows.Point[],System.Windows.Point,System.Double)">
            <summary>
            Rotates the points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.ToInvariantString(System.Windows.Point)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="p">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.MirrorPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the opposite of point p with respect to specified line.
            </summary>
            <param name="p"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.AreDistanceOrdered(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns <c>true</c> if for three given points <c>p, u, v </c>one has <c>|p-u| &lt; |p-v|</c>.
            </summary>
            <param name="p">A point.</param>
            <param name="u">The second point.</param>
            <param name="v">The third point.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Subtracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.MirrorPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Mirrors the point with respect to the given center.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.MiddlePoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returs the middle point between the given points.
            </summary>
            <param name="p1">A point.</param>
            <param name="p2">Another point.</param>
            <returns>Halfway between the two given points.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.GetTopLeftPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the minimum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.GetBottomRightPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the maximum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Substract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Substracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Subtracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.SameSide(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determine whether p1 and p2 are on the same side of a line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.IsCounterClockWise(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines, given three points, if when travelling from the first to
            the second to the third, we travel in a counterclockwise direction.
            </summary>
            <remarks>
            1 if the movement is in a counterclockwise direction, -1 if not.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Dots the specified v1.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Dots the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinants the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.DistancePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the point of the specified line segment which determines the distance from the specified point to the line segment.
            That is, the perpendicular projection onto the segment.
            </summary>
            <param name="p">The point outside the segment.</param>
            <param name="a">The first point defining the segment.</param>
            <param name="b">The second point defining the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.ProjectPointOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the projection (point) of the given point on the line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.RotateTransform(System.Windows.Point,System.Double)">
            <summary>
            Rotates the transform.
            </summary>
            <param name="center">The center.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Lerp(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Linear interpolation between the given points.
            </summary>
            <param name="p">A point.</param>
            <param name="q">Another point.</param>
            <param name="fraction">A value in the [0,1] interval. At zero the interpolation returns the first point, at one it results in the second point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Normals the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.InvertPoint(System.Windows.Point)">
            <summary>
            Inverts the point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PointExtensions.NearestPoint(System.Windows.Point,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Nearests the point.
            </summary>
            <param name="point">The point.</param>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.RectExtensions">
            <summary>
            Extensions on the <see cref="T:System.Windows.Rect"/> structure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.IsInBoundsOf(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets whether the Rect is fully in bounds of the hosting rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="hostingRect">The hosting rect.</param>
            <returns>Returns true if the rect is fully inside the boudns fo the hosting rect.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.IsBiggerThan(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether the specified rect is bigger.
            </summary>
            <param name="rect">The rect.</param>
            <param name="targetRect">The target rect.</param>
            <returns>
              <c>true</c> if the specified rect is bigger; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.FromLtrd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new rectangle from the lefttop and rightbottom coordinates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Rotate(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotates the given rectangle with the specified amount with respect to a rotation anchor.
            </summary>
            <param name="rect">The rectangle to rotate.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="offsetVector">The anchor (fixed-point) of the rotation.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.TopLeft(System.Windows.Rect)">
            <summary>
            Returns the top-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.TopRight(System.Windows.Rect)">
            <summary>
            Returns the top-right point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.BottomRight(System.Windows.Rect)">
            <summary>
            Returns the bottom-right corner of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.BottomLeft(System.Windows.Rect)">
            <summary>
            Returns the bottom-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterLeft(System.Windows.Rect)">
            <summary>
            Centers the left.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterTop(System.Windows.Rect)">
            <summary>
            Centers the top.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterRight(System.Windows.Rect)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterBottom(System.Windows.Rect)">
            <summary>
            Centers the bottom.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Center(System.Windows.Rect)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterX(System.Windows.Rect)">
            <summary>
            Centers the X.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterY(System.Windows.Rect)">
            <summary>
            Centers the Y.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.TopLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Tops the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.TopRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Tops the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.BottomRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Bottoms the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.BottomLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Bottoms the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Center(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterTop(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the top.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.CenterBottom(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the bottom.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Contains(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Determines whether [contains] [the specified rect].
            </summary>
            <param name="rect">The rect.</param>
            <param name="point">The point.</param>
            <param name="angle">The angle.</param>
            <returns>
              <c>true</c> if [contains] [the specified rect]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Returns whether the rectangle intersects the rotated rectangle.
            </summary>
            <remarks>The rotation is with respect to the center of the rectangle.</remarks>
            <param name="rect">A rectangle.</param>
            <param name="otherRectangle">The rectangle which will be rotated before being compared for overlap.</param>
            <param name="angle">The angle of the rotation.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.ToSize(System.Windows.Rect)">
            <summary>
            Returns the size of the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.GenerateTransform(System.Windows.Point,System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Performs a rotation of the given point with respect to a point in the rectangle defined by an offset from the center.
            </summary>
            <param name="pointToRotate">The new point.</param>
            <param name="rect">The rectangle whose center will be offset and taken as the anchor of the rotation.</param>
            <param name="angle">The rotation angle.</param>
            <param name="offsetVector">The offset vector with respect to the center of the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.ToRect(System.Windows.Size)">
            <summary>
            Return a rectangle located a (0.0) with the specified size.
            </summary>
            <param name="size">The s.</param>
            <returns>A rectangle located at the (0.0).</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.NewRect(System.Windows.Point,System.Double)">
            <summary>
            Creates a new rectangle based on the middle point rather than the LT origin.
            </summary>
            <param name="center">The center of the rectangle.</param>
            <param name="size">The size of the new rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.NewRect(System.Windows.Point,System.Windows.Size)">
            <summary>
            News the rect.
            </summary>
            <param name="center">The center.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Offset(System.Windows.Rect,System.Windows.Vector)">
            <summary>
            Offsets the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Offset(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the current rectangle with the specified values.
            </summary>
            <param name="rect">The rectangle to offset.</param>
            <param name="x">The horizontal offset.</param>
            <param name="y">The vertical offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Inflate(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Inflates the given rectangle with the specified amount.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Inflate(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Inflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Contains(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Determines whether [contains] [the specified rectangle].
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="p">The p.</param>
            <returns>
              <c>true</c> if [contains] [the specified rectangle]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.MiddlePoint(System.Windows.Rect)">
            <summary>
            Returns the center point of the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Union(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Unions the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RectExtensions.Inflate(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.RectExtensions.RotateTransform">
            <summary>
            Simple RotateTransform.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Utils">
            <summary>
            Diverse extension method which do not fit in the more specialized extension classes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.BetweenOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tells you whether the given value sits in the specified interval.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.PolylineToBezier(System.Collections.ObjectModel.Collection{System.Windows.Point})">
            <summary>
            The opposite of the approximation method, this attempts to smoothen out the polyline to a Bezier curve.
            </summary>
            <param name="points">The polyline.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)">
            <summary>
            Converts the Cartesian coordinates to polar coordinates.
            </summary>
            <param name="rootPoint">The root point.</param>
            <param name="otherPoint">The other point.</param>
            <param name="angle">The angle.</param>
            <param name="rho">The rho.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.PolarToCartesian(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Polars to cartesian coordinates conversion.
            </summary>
            <param name="coordCenter">The coordinate center.</param>
            <param name="angle">The angle.</param>
            <param name="rho">The polar radius.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Maths.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Clone(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Clones the specified list.
            </summary>
            <param name="doubles">The list to clone.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrains the specified value to the given interval.
            </summary>
            <param name="value">The value to constrain.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.GetProjections(System.Windows.Point,System.Windows.Rect,System.Windows.Point[])">
            <summary>
            Gets the projected points of the specified point on the given rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.GetBezierPoint(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Int32,System.Double)">
            <summary>
            Gets the Bezier point at the specified value.
            </summary>
            <param name="points">The points.</param>
            <param name="segment">The segment.</param>
            <param name="value">A value in the interval [0,1].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.GetPythagorEqualSide(System.Double)">
            <summary>
            Gets the equal sides of a triange from the Pythagor theorem.
            </summary>
            <param name="hypotenuse">The hypotenuse.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.GetPythagorHypotenuse(System.Double,System.Double)">
            <summary>
            Gets the hypotenuse according to the Pythagor theorem.
            </summary>
            <param name="sideA">The first side.</param>
            <param name="sideB">The second side.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.HasValidArea(System.Windows.Size)">
            <summary>
            Determines whether [has valid area] [the specified size].
            </summary>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if [has valid area] [the specified size]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Hypotenuse(System.Double,System.Double)">
            <summary>
            Hypotenuses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.IsPointInRectangle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Determines whether [is point in rectangle] [the specified pt].
            </summary>
            <param name="pt">The pt.</param>
            <param name="rc">The rc.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified pt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.IsInRightOpenInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is in right open interval] [the specified v].
            </summary>
            <param name="v">The v.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>
              <c>True</c> f [is in right open interval] [the specified v]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.IsInClosedInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is in closed interval] [the specified v].
            </summary>
            <param name="v">The v.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>
              <c>True</c> if [is in closed interval] [the specified v]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Invert(System.Windows.Media.Matrix)">
            <summary>
            Inverts the matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Limit(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Moves the given point into the rectangle by taking the rectangle's intervals as limiting values for
            the point's coordinates.
            </summary>
            <param name="p">Any point.</param>
            <param name="rectangle">A rectangle which acts as limiting container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation between the given values.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Linear_interpolation .</remarks>
            <param name="x">A value.</param>
            <param name="y">Another value.</param>
            <param name="fraction">A value in the [0,1] interval. At zero the interpolation returns the first value, at one it results in the second value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Multiplies the given matrices.
            </summary>
            <param name="m1">A matrix.</param>
            <param name="m2">Another matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.NormalizeAngle(System.Double)">
            <summary>
            Normalizes the specified angle into the [0, 2Pi] interval.
            </summary>
            <param name="angle">
            The angle.
            </param>
            <returns>
            The normalize.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.OffsetPointCollection(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Collections.ObjectModel.Collection{System.Windows.Point},System.Windows.Vector)">
            <summary>
            Offsets the point collection.
            </summary>
            <param name="points">The points.</param>
            <param name="originalPoints">The original points.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Push(System.Windows.Point,System.Windows.Vector,System.Double)">
            <summary>
            Pushes the specified start point onwards in the direction specified by the vector and a length given.
            </summary>
            <param name="start">The start.</param>
            <param name="unitVector">The unit vector.</param>
            <param name="distance">The distance to push.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.SafeDivide(System.Double,System.Double,System.Double)">
            <summary>
            Safes the divide.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="fallback">The fallback.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Shrink(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shrinks the specified outer bounds.
            </summary>
            <param name="outerBounds">The outer bounds.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.StairValue(System.Double,System.Double,System.Double)">
            <summary>
            Returns zero within the given interval and +/-1 whether the value is above or below the interval.
            </summary>
            <param name="value">The argument of the function.</param>
            <param name="lower">The lower value of the interval.</param>
            <param name="upper">The upper value of the interval.</param>
            <returns>Zero, -1 or +1 whether the value is below, resp. inside, resp. above the interval.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.StairValue(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the <see cref="M:Telerik.Windows.Maths.Utils.StairValue(System.Double,System.Double,System.Double)"/> of the x,y values of the given point with.
            respect to the boundaries of the specified rectangle.
            </summary>
            <param name="p">The point to test.</param>
            <param name="rectangle">The rectangle which acts as the domain of the stair function.</param>
            <returns>Zero, -1 or +1 whether the coordinate is below, resp. inside, resp. above the boundary of the rectangle.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the values of the two numbers.
            </summary>
            <param name="a">A value.</param>
            <param name="b">Another value.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Snap(System.Double,System.Int32)">
            <summary>
            Snaps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="snappingValue">The snapping value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Transform(System.Windows.Media.GeneralTransform,System.Windows.Rect)">
            <summary>
            Transforms the specified tr.
            </summary>
            <param name="tr">The tr.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.Transform(System.Windows.Media.Matrix,System.Windows.Rect)">
            <summary>
            Transforms the specified m.
            </summary>
            <param name="m">The m.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.TransformPercentToSize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Transforms the size of the percent to.
            </summary>
            <param name="rect">The rect.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToMatrix(System.Windows.Media.Transform)">
            <summary>
            Toes the matrix.
            </summary>
            <param name="transform">The transform.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToInvariantString(System.Windows.Size)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToInvariantString(System.Double)">
            <summary>
            Converts the double to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToInvariantString(System.Int32)">
            <summary>
            Converts the int to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToSize(System.String)">
            <summary>
            Sizes from string.
            </summary>
            <param name="s">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.ToEnum``1(System.Object)">
            <summary>
            Converts the given value to an enum type.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Utils.GetBezierCoefficients(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the bezier coefficients, see http://processingjs.nihongoresources.com/bezierinfo/ .
            </summary>
            <param name="a0">The a0.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="b0">The b0.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="b3">The b3.</param>
            <param name="u">The u.</param>
            <param name="s">The s.</param>
            <param name="z">The z.</param>
            <param name="x4">The x4.</param>
            <param name="y4">The y4.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.Lerp(System.Windows.Vector,System.Windows.Vector,System.Double)">
            <summary>
            Linear interpolation between the given vectors.
            </summary>
            <param name="u">A point.</param>
            <param name="v">Another point.</param>
            <param name="fraction">A value in the [0,1] interval. At zero the interpolation returns the first vector, at one it results in the second vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.MirrorHorizontally(System.Windows.Vector)">
            <summary>
            Returns the mirrored vector with respect to the X-coordinate.
            </summary>
            <param name="v">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.MirrorVertically(System.Windows.Vector)">
            <summary>
            Returns the mirrored vector with respect to the Y-coordinate.
            </summary>
            <param name="v">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.UnitVector(System.Double)">
            <summary>
            Returns a unit vector in the direction specified by the angle.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>A unit vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.Perpendicular(System.Windows.Vector)">
            <summary>
            Returns the perpendicular of the specified vector.
            </summary>
            <param name="v">A vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.VectorExtensions.Normalized(System.Windows.Vector)">
            <summary>
            Normalizeds the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.InterpolationExtensions.FillLinear(System.Double[],System.Int32,System.Double,System.Boolean)">
            <summary>
            Fills up an array of linear extrapolations on the basis of the given values.
            </summary>
            <param name="y">The array of values to interpolate.</param>
            <param name="howMany">How many items to generate.</param>
            <param name="stepValue">The step value. Considering the <paramref name="y"/>-values as function values of an array of real values, the <paramref name="stepValue"/> represents the step between these (functional domain) values.</param>
            <param name="fromStart">if set to <c>true</c> the resulting array will not continue (extrapolate) the given <paramref name="y"/>-array but rather return the actual values of the calculated interpolation. </param>
            <remarks>
            Use the <see cref="M:Telerik.Windows.Maths.InterpolationExtensions.LeastSquaresBestFitLine(System.Double[],System.Double[])"/> interpolation to get a linear function from which arbitrary functional values can be calculated.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.InterpolationExtensions.FillExponential(System.Double[],System.Int32,System.Double,System.Boolean)">
            <summary>
            Fills up an array of exponential extrapolations on the basis of the given values.
            </summary>
            <param name="fromStart">if set to <c>true</c> the resulting array will not continue (extrapolate) the given <paramref name="y"/>-array but rather return the actual values of the calculated interpolation. </param>
            <param name="y">The values to inter-expolate.</param>
            <param name="howMany">How many items to generate.</param>
            <param name="stepValue">The step value. Considering the <paramref name="y"/>-values as function values of an array of real values, the <paramref name="stepValue"/> represents the step between these (functional domain) values.</param>
        </member>
        <member name="T:Telerik.Windows.Maths.Numbers">
            <summary>
            Number theory utility functions for integers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.IsEven(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.Truncate(System.Double)">
            <summary>
            Truncates the specified number by dropping its decimals.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.IsPowerOfTwo(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.IsPowerOfTwo(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            32 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.PowerOfTwo(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the greatest common divisor of the given list.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.GreatestCommonDivisor(System.Int32[])">
            <summary>
            Returns the greatest common divisor of the given numbers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.LeastCommonMultiple(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Numbers.LeastCommonMultiple(System.Int32[])">
            <summary>
            Returns the least common multiple of the given numbers.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.ProgressReporter">
            <summary>
            A class used by Tasks to report progress or completion updates back to the UI.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.ProgressReporter.scheduler">
            <summary>
            The underlying scheduler for the UI's synchronization context.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ProgressReporter"/> class.
            This should be run on a UI thread.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.ReportProgressAsync(System.Action)">
            <summary>
            Reports the progress to the UI thread. This method should be called from the task.
            Note that the progress update is asynchronous with respect to the reporting Task.
            For a synchronous progress update, wait on the returned <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="action">The action to perform in the context of the UI thread.
            Note that this action is run asynchronously on the UI thread.</param>
            <returns>The task queued to the UI thread.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.ReportProgress(System.Action)">
            <summary>
            Reports the progress to the UI thread, and waits for the UI thread to process
            the update before returning. This method should be called from the task.
            </summary>
            <param name="action">The action to perform in the context of the UI thread.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterContinuation(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Registers a UI thread handler for when the specified task finishes execution,
            whether it finishes with success, failiure, or cancellation.
            </summary>
            <param name="task">The task to monitor for completion.</param>
            <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
            <returns>The continuation created to handle completion. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterContinuation``1(System.Threading.Tasks.Task{``0},System.Action)">
            <summary>
            Registers a UI thread handler for when the specified task finishes execution,
            whether it finishes with success, failiure, or cancellation.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="task">The task to monitor for completion.</param>
            <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
            <returns>The continuation created to handle completion. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterSucceededHandler(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Registers a UI thread handler for when the specified task successfully finishes execution.
            </summary>
            <param name="task">The task to monitor for successful completion.</param>
            <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.</param>
            <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterSucceededHandler``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Registers a UI thread handler for when the specified task successfully finishes execution
            and returns a result.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="task">The task to monitor for successful completion.</param>
            <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.
            The argument to the action is the return value of the task.</param>
            <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterFaultedHandler(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
            Registers a UI thread handler for when the specified task becomes faulted.
            </summary>
            <param name="task">The task to monitor for faulting.</param>
            <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
            <returns>The continuation created to handle faulting. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterFaultedHandler``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
            <summary>
            Registers a UI thread handler for when the specified task becomes faulted.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="task">The task to monitor for faulting.</param>
            <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
            <returns>The continuation created to handle faulting. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterCancelledHandler(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Registers a UI thread handler for when the specified task is cancelled.
            </summary>
            <param name="task">The task to monitor for cancellation.</param>
            <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
            <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ProgressReporter.RegisterCancelledHandler``1(System.Threading.Tasks.Task{``0},System.Action)">
            <summary>
            Registers a UI thread handler for when the specified task is cancelled.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="task">The task to monitor for cancellation.</param>
            <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
            <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
        </member>
        <member name="P:Telerik.Windows.Maths.ProgressReporter.Scheduler">
            <summary>
            Gets the task scheduler which executes tasks on the UI thread.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentHistogramContainsNot">
            <summary>
              Looks up a localized string similar to The histogram does not contains the value {0}..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentInIntervalXYInclusive">
            <summary>
              Looks up a localized string similar to Value is expected to be between {0} and {1} (including {0} and {1})..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The matrix indices must not be out of range of the given matrix..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixNotRankDeficient">
            <summary>
              Looks up a localized string similar to Matrix must not be rank deficient..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixNotSingular">
            <summary>
              Looks up a localized string similar to Matrix must not be singular..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSameColumnDimension">
            <summary>
              Looks up a localized string similar to Matrix column dimensions must agree..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSameDimensions">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSameRowDimension">
            <summary>
              Looks up a localized string similar to Matrix row dimensions must agree..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSingleColumn">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSingleColumnRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column and row, thus have only one cell..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSingleRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one row..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSquare">
            <summary>
              Looks up a localized string similar to Matrix must be square..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSymmetric">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentMatrixSymmetricPositiveDefinite">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric positive definite..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentNotInfinityNaN">
            <summary>
              Looks up a localized string similar to Value must neither be infinite nor NaN..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentNotNegative">
            <summary>
              Looks up a localized string similar to Value must not be negative (zero is ok)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentNull">
            <summary>
              Looks up a localized string similar to {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentOutOfRangeGreater">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentParameterSetInvalid">
            <summary>
              Looks up a localized string similar to The chosen parameter set is invalid (probably some value is out of range)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentParseComplexNumber">
            <summary>
              Looks up a localized string similar to The given expression does not represent a complex number..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentPositive">
            <summary>
              Looks up a localized string similar to Value must be positive (and not zero)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentPowerOfTwo">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentPowerOfTwoEveryDimension">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two in every dimension..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentRangeLessEqual">
            <summary>
              Looks up a localized string similar to The range between {0} and {1} must be less than or equal to {2}..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentSingleDimensionArray">
            <summary>
              Looks up a localized string similar to Array must have exactly one dimension (and not be null)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentTooLarge">
            <summary>
              Looks up a localized string similar to Value is too large..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentTooLargeForIterationLimit">
            <summary>
              Looks up a localized string similar to Value is too large for the current iteration limit..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentTypeMismatch">
            <summary>
              Looks up a localized string similar to Type mismatch..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentVectorLengthsMultipleOf">
            <summary>
              Looks up a localized string similar to Array length must be a multiple of {0}..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentVectorsSameLengths">
            <summary>
              Looks up a localized string similar to All vectors must have the same dimensionality..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArgumentVectorThreeDimensional">
            <summary>
              Looks up a localized string similar to The vector must have 3 dimensions..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.ArrayTooSmall">
            <summary>
              Looks up a localized string similar to The array is not large enough..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.FeaturePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This feature is not implemented yet (but is planned)..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidDistributionParameters">
            <summary>
              Looks up a localized string similar to The distribution parametrization is not valid..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidLeftBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Left Boundary Condition..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidOperationAccumulatorEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the accumulator is empty..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidOperationHistogramEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the histogram is empty..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidOperationHistogramNotEnoughPoints">
            <summary>
              Looks up a localized string similar to Not enough points in the distribution..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidOperationNoSamplesProvided">
            <summary>
              Looks up a localized string similar to No Samples Provided. Preparation Required..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.InvalidRightBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Right Boundary Condition..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.IsAlreadyInTheStructure">
            <summary>
              Looks up a localized string similar to The item is already present in the data structure..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.IsEmpty">
            <summary>
              Looks up a localized string similar to The collection is empty..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.NotInGraph">
            <summary>
              Looks up a localized string similar to The specified item is not part of the graph..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.NotPowerOfTwo">
            <summary>
              Looks up a localized string similar to The length of the list must be a power of two..
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Properties.Resource.SpecialCasePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This special case is not supported yet (but is planned)..
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.RMatrix">
            <summary>
            A real-valued matrix.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.RVector">
            <summary>
            A  real-valued vector.
            </summary>    
        </member>
        <member name="M:Telerik.Windows.Maths.RVector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RVector"/> struct.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RVector.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.RVector"/> struct.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.RVector.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.RVector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Maths.RVector.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="i">The entry number.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Requested vector index is out of range!</exception>
        </member>
        <member name="T:Telerik.Windows.Maths.ChiDistribution">
            <summary>
            Provides generation of chi distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Telerik.Windows.Maths.ChiDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ContinuousDistribution"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.ContinuousDistribution"/> class.
            </summary>
            <param name="stochasticSourceSource">The stochastic source source.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.NextDouble">
            <summary>
            Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ContinuousDistribution.Reset">
            <summary>
            Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.StochasticSource">
            <summary>
            Gets or sets a <see cref="P:Telerik.Windows.Maths.ContinuousDistribution.StochasticSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ContinuousDistribution.CanReset">
            <summary>
            Gets a value indicating whether the random number distribution can be reset,
            so that it produces the same  random number sequence again.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:Telerik.Windows.Maths.DefaultSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.IsValidParameterSet(System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if degreesOfFreedom is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.NextDouble">
            <summary>
            Returns a chi distributed floating point random number.
            </summary>
            <returns>A chi distributed double-precision floating point number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.ChiDistribution.SetDistributionParameters(System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom (the number of standard distributed random variables) parameter.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.StochasticSource">
            <summary>
            Gets or sets a <see cref="T:Telerik.Windows.Maths.DefaultSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.ChiDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.GaussianDistribution">
            <summary>
            Gaussian or Normal probability distribution.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>See <see cref="!:http://en.wikipedia.org/wiki/Normal_distribution">
            Wikipedia - Normal distribution</see>.</description></item>
            <item>
            <description>The Box-Muller transformation: http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform .</description></item>
            <item>
            <description>See the <i>Box-Muller</i> algorithm for generating random deviates
            with a normal distribution: <see cref="!:http://www.library.cornell.edu/nr/">
            Numerical recipes in C</see> (chapter 7)</description></item></list>
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.GaussianDistribution"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.GaussianDistribution"/> class.
            </summary>
            <param name="random">The random.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
            <param name="x">The upper value of the integral.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Inverses the cumulative distribution.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.NextDouble">
            <summary>
            Returns a distributed floating point random number.
            </summary>
            <returns>
            A distributed double-precision floating point number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Checks whether the parameters of the distribution are valid. 
            </summary>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <returns><c>true</c> when the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.SampleBoxMuller(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Samples a pair of standard normal distributed random variables using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <returns>a pair of random numbers from the standard normal distribution.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GaussianDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Maximum">
            <summary>
            Gets the maximum possible value of the distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Mean">
            <summary>
            Gets the mean value of the distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Median">
            <summary>
            Gets the median of this Gaussian distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Minimum">
            <summary>
            Gets the minimum possible value of this distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Skewness">
            <summary>
            Gets the skewness of this distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GaussianDistribution.Variance">
            <summary>
            Gets the variance of distribution.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.BinomialDistribution">
            <summary>
            The binomial distribution of random numbers.
            </summary>
            <remarks>
            The binomial distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on  <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
        </member>
        <member name="T:Telerik.Windows.Maths.DiscreteDistributionBase">
            <summary>
            Base class for all discrete stochastic distributions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DiscreteDistributionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DiscreteDistributionBase"/> class, using a 
            <see cref="T:Telerik.Windows.Maths.DefaultSource"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DiscreteDistributionBase.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DiscreteDistributionBase"/> class, using the
            specified <see cref="P:Telerik.Windows.Maths.DiscreteDistributionBase.Randomizer"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="P:Telerik.Windows.Maths.DiscreteDistributionBase.Randomizer"/> object aka stochastic source.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.DiscreteDistributionBase.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DiscreteDistributionBase.Next">
            <summary>
            Returns a distributed integer random number.
            </summary>
            <returns>A distributed 32 bit signed integer number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DiscreteDistributionBase.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Randomizer">
            <summary>
            Gets or sets a <see cref="P:Telerik.Windows.Maths.DiscreteDistributionBase.Randomizer"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.DiscreteDistributionBase.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.BinomialDistribution.n">
            <summary>
            The number of trials
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.BinomialDistribution.p">
            <summary>
            The probability.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinomialDistribution"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinomialDistribution"/> class.
            </summary>
            <param name="random">The random.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.BinomialDistribution"/> class.
            </summary>
            <param name="probabilityOfSuccess">The probability of success.</param>
            <param name="numberOfTrials">The number of trials.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if probabilityOfSuccess is greater than or equal to 0.0, and less than or equal to 1.0,
            and numberOfTrials is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.Next">
            <summary>
            Returns a bernoulli distributed random number.
            </summary>
            <returns>A bernoulli distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.BinomialDistribution.SetDistributionParameters(System.Double,System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.NumberOfTrials">
            <summary>
            Gets or sets the number of trials parameter.
            </summary>
            <remarks>Call <see cref="M:Telerik.Windows.Maths.BinomialDistribution.IsValidParameterSet(System.Double,System.Int32)"/> to determine whether a value is valid and therefore assignable.</remarks>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.ProbabilityOfSuccess">
            <summary>
            Gets or sets the success probability parameter.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.BinomialDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.GeometricDistribution">
            <summary>
            Provides generation of geometric distributed random numbers.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/Geometric_distribution
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:Telerik.Windows.Maths.DiscreteDistributionBase.Randomizer"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters are valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.Next">
            <summary>
            Returns a geometric distributed floating point random number.
            </summary>
            <returns>A geometric distributed double-precision floating point number.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Returns the discrete probability mass function of this probability distribution.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.GeometricDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.ProbabilityOfSuccess">
            <summary>
            Gets or sets the success probability parameter.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.GeometricDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.PoissonDistribution">
            <summary>
            Generates Poisson distributed values.
            </summary>
            <remarks> 
            <para>See http://en.wikipedia.org/wiki/Poisson_distribution .</para>
            <para>See http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html .</para>
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.#ctor(Telerik.Windows.Maths.IStochastic)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:Telerik.Windows.Maths.IStochastic"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:Telerik.Windows.Maths.IStochastic"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:Telerik.Windows.Maths.DefaultSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters are valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            See http://en.wikipedia.org/wiki/Probability_mass_function .
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            See http://en.wikipedia.org/wiki/Cumulative_distribution_function .
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.PoissonDistribution.Next">
            <summary>
            Returns a poisson distributed random number.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Lambda">
            <summary>
            Gets or sets the lambda parameter.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
            <remarks>This is an approximation and not an exact value.</remarks>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.PoissonDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.CryptoRandom">
            <summary>
            A replacement of the <see cref="T:System.Random"/> randomizer based on the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoRandom.Next">
            <summary>
            Returns a new random integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoRandom.Next(System.Int32)">
            <summary>
            Returns a new random integer less than the given maximum.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a new random integer in the given interval.
            </summary>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoRandom.NextDouble">
            <summary>
             Returns a new random double in the [0,1] interval.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.CryptoSource">
            <summary>
            Random number generator based on the <see cref="T:Telerik.Windows.Maths.CryptoRandom"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.StochasticBase">
            <summary>
            Base class for stochastic distributions.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.IStochastic">
            <summary>
            Defines a stochastic source.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.Next">
            <summary>
            Returns a new positive random number.
            </summary>
            <returns>
            A positive random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.Next(System.Int32)">
            <summary>
            Returns a new positive random number less than the specified maximum.
            </summary>
            <returns>
            A positive random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.Next(System.Int32,System.Int32)">
            <summary>
            Returns a new positive random number in the specified interval.
            </summary>
            <returns>
            A positive random number in the given interval.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.NextDouble">
            <summary>
            Returns a new random number in the [0,1) interval.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.NextDouble(System.Double)">
            <summary>
            Returns a new floating random number less than the specified maximum.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a new floating random number in the specified interval.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.NextBoolean">
            <summary>
            Returns a random boolean.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.IStochastic.NextBytes(System.Byte[])">
            <summary>
            Returns a random byte.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.Next">
            <summary>
            Returns a new positive random number.
            </summary>
            <returns>
            A positive random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.Next(System.Int32)">
            <summary>
            Returns a new positive random number less than the specified maximum.
            </summary>
            <returns>
            A positive random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.Next(System.Int32,System.Int32)">
            <summary>
            Returns a new positive random number in the specified interval.
            </summary>
            <returns>
            A positive random number in the given interval.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.NextDouble">
            <summary>
            Returns a new random number in the [0,1) interval.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.NextDouble(System.Double)">
            <summary>
            Returns a new floating random number less than the specified maximum.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a new floating random number in the specified interval.
            </summary>
            <returns>
            A floating random number.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.NextBoolean">
            <summary>
            Returns a random boolean.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.StochasticBase.NextBytes(System.Byte[])">
            <summary>
            Returns a random byte.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="F:Telerik.Windows.Maths.CryptoSource.bitBuffer">
            <summary>
            Stores an <see cref="T:System.Int32"/> used to generate up to 31 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.CryptoSource.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Telerik.Windows.Maths.CryptoSource.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.CryptoSource"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits (1 int) for future calls, so a new random number is only generated every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to zero, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to zero. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to zero, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes zero but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.CryptoSource.Reset">
            <summary>
            Resets the <see cref="T:Telerik.Windows.Maths.DefaultSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary> 
        </member>
        <member name="T:Telerik.Windows.Maths.DefaultSource">
            <summary>
            Random number generator based on the <see cref="T:System.Random"/> class.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DefaultSource.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DefaultSource.bitBuffer">
            <summary>
            Stores an <see cref="T:System.Int32"/> used to generate up to 31 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.DefaultSource.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Telerik.Windows.Maths.DefaultSource.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DefaultSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.DefaultSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits (1 int) for future calls, so a new random number is only generated every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to zero, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to zero. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to zero, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes zero but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.DefaultSource.Reset">
            <summary>
            Resets the <see cref="T:Telerik.Windows.Maths.DefaultSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary> 
        </member>
        <member name="T:Telerik.Windows.Maths.MersenneSource">
            <summary>
            The Mersenne twister is a pseudorandom number generator developed in 1997 by Makoto Matsumoto 
            and Takuji Nishimura that is based on a matrix linear recurrence over a finite binary field.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>For implementation details see the Mersenne Twister Home Page: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html .</description></item>
            <item>
            <description>See Wikipedia for general info on this topic: http://en.wikipedia.org/wiki/Mersenne_twister .</description></item></list>
            </remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.LowerMask">
            <summary>
            Represents the least significant r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x7fffffff.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.M">
            <summary>
            Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
            <remarks>The value of this constant is 397.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.N">
            <summary>
            Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
            <remarks>The value of this constant is 624.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.UpperMask">
            <summary>
            Represents the most significant w-r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x80000000.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.VectorA">
            <summary>
            Represents the constant vector a. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x9908b0dfU.</remarks>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.mt">
            <summary>
            Stores the state vector array.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.seedArray">
            <summary>
            Stores the used seed array.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Telerik.Windows.Maths.MersenneSource.bitBuffer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Maths.MersenneSource.mti">
            <summary>
            Stores an index for the state vector array element that will be accessed next.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MersenneSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MersenneSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MersenneSource"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of numbers used to calculate a starting values for the pseudo-random number sequence.
            If negative numbers are specified, the absolute values of them are used. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.MersenneSource"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of unsigned numbers used to calculate a starting values for the pseudo-random number sequence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref>
                                                              <name>Int32.MaxValue</name>
                                                            </paramref> .
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref>
                                                                   <name>Int32.MaxValue</name>
                                                                 </paramref> .
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.GenerateUnsignedInts">
            <summary>
            Generates <see cref="F:Telerik.Windows.Maths.MersenneSource.N"/> unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.ResetBySeedArray">
            <summary>
            Extends resetting of the <see cref="T:Telerik.Windows.Maths.MersenneSource"/> using the <see cref="F:Telerik.Windows.Maths.MersenneSource.seedArray"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.MersenneSource.Reset">
            <summary>
            Resets the <see cref="T:Telerik.Windows.Maths.MersenneSource"/>,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.TextExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the first character of the given string.
            </summary>
            <param name="s">The string to capiatalize.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.TextExtensions.ToSentenceCase(System.String)">
            <summary>
            Capitalizes the first letter after a period ('.').
            </summary>
            <param name="text">The text to be processes.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Maths.Trigonometry">
            <summary>
            Trigonometry functions and extensions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.ToRadians(System.Double)">
            <summary>
            Converts the given value to radians assuming it's a value spefifying degrees.
            </summary>
            <param name="degree">The degrees.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Maths.Trigonometry.DegreesToRadians(System.Double)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.ToDegrees(System.Double)">
            <summary>
            Converts the given value to degrees assuming it's a value spefifying radians.
            </summary>
            <param name="radians">The radians.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Maths.Trigonometry.RadiansToDegrees(System.Double)"/>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Sine(System.Double)">
            <summary>
            Returns the sine of the given angle (in radians).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Cosine(System.Double)">
            <summary>
            Returns the cosine of the given angle (in radians).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Tangent(System.Double)">
            <summary>
            Returns the tangent of the given angle (in radians).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Cotangent(System.Double)">
            <summary>
            Returns the cotangent of the given angle (in radians).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Secant(System.Double)">
            <summary>
            Returns the secant of the given angle (in radians).
            </summary>
            <remarks>Sec = 1/Cos.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.Cosecant(System.Double)">
            <summary>
            Returns the cosecant of the given angle (in radians).
            </summary>
            <remarks>Cosec = 1/Sin.</remarks>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseSine(System.Double)">
            <summary>
            Returns the inverse sine of the given value.
            </summary>
            <param name="real">The value.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseCosine(System.Double)">
            <summary>
            Returns the inverse cosine of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseTangent(System.Double)">
            <summary>
            Returns the inverse tangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseTangentFromRatio(System.Double,System.Double)">
            <summary>
            Returns the inverse tangent of the given ratio values.
            </summary>
            <param name="nominator">The nominator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseCotangent(System.Double)">
            <summary>
            Returns the inverse cotangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseSecant(System.Double)">
            <summary>
            Returns the inverse secans of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseCosecant(System.Double)">
            <summary>
            Returns the inverse cosecans of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicSine(System.Double)">
            <summary>
            Returns the hyperbolic sine of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicCosine(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicTangent(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicCotangent(System.Double)">
            <summary>
            Returns the hyperbolic cotangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicSecant(System.Double)">
            <summary>
            Returns the hyperbolic secans of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.HyperbolicCosecant(System.Double)">
            <summary>
            Returns the hyperbolic cosecans of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicSine(System.Double)">
            <summary>
            Returns the inverse hyperbolic since of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicCosine(System.Double)">
            <summary>
            Returns the inverse hyperbolic cosine of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicTangent(System.Double)">
            <summary>
            Returns the inverse hyperbolic tangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicCotangent(System.Double)">
            <summary>
            Returns the inverse hyperbolic cotangent of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicSecant(System.Double)">
            <summary>
            Returns the inverse hyperbolic cosine of the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Maths.Trigonometry.InverseHyperbolicCosecant(System.Double)">
            <summary>
            Returns the inverse hyperbolic cosecans of the given value.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Maths.Range`1">
            <summary>
            Generic range implementation.
            </summary>
            <typeparam name="TData">The data type of the range.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.#ctor(`0,`0,System.Func{`0,`0},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Range`1"/> class.
            </summary>
            <param name="start">The start-element of the range.</param>
            <param name="end">The end-element of the range.</param>
            <param name="nextElement">The functional mapping from one element to the next one.</param>
            <param name="compare">The comparison between two items.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.#ctor(`0,`0,System.Func{`0,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Maths.Range`1"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="nextElement">The get next.</param>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.Contains(`0)">
            <summary>
            Returns whether the given value is in the range.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is inside the range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.System#Collections#Generic#IEnumerable{TData}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Maths.Range`1.Compare(`0,`0)">
            <summary>
            Compares the specified one.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Maths.Range`1.End">
            <summary>
            Gets the end of the range.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Maths.Range`1.Start">
            <summary>
            Gets the start of the range.
            </summary>
        </member>
    </members>
</doc>
